components:
  schemas:
    Article:
      properties:
        Body:
          type: string
        MimeType:
          type: string
        SenderType:
          type: string
        Subject:
          type: string
      required:
      - Subject
      - Body
      - MimeType
      - SenderType
      type: object
    Certificate:
      properties:
        CertificateID:
          type: string
        CommonName:
          type: string
        Name:
          type: string
      type: object
    CertificateCreate:
      properties:
        CertificateData:
          type: string
        Name:
          type: string
      required:
      - Name
      - CertificateData
      type: object
    Channel:
      properties:
        ChannelID:
          type: string
        Name:
          type: string
      type: object
    Command:
      properties:
        Description:
          type: string
        Name:
          type: string
      type: object
    ConfigItem:
      properties:
        ClassID:
          type: string
        ConfigItemID:
          type: string
        DeploymentState:
          type: string
        Name:
          type: string
      type: object
    ConfigItemCreate:
      properties:
        ClassID:
          type: string
        DeploymentState:
          type: string
        Name:
          type: string
      required:
      - Name
      - ClassID
      type: object
    ConfigItemUpdate:
      properties:
        ClassID:
          type: string
        DeploymentState:
          type: string
        Name:
          type: string
      type: object
    ConfigOption:
      properties:
        Name:
          type: string
        Value:
          type: object
      type: object
    ConfigOptionDefinition:
      properties:
        Description:
          type: string
        Name:
          type: string
        Type:
          type: string
      type: object
    Contact:
      properties:
        ContactID:
          type: string
        Email:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        OrganisationID:
          type: string
        Phone:
          type: string
      type: object
    ContactCreate:
      properties:
        Email:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        OrganisationID:
          type: string
        Phone:
          type: string
      required:
      - FirstName
      - LastName
      - Email
      type: object
    ContactUpdate:
      properties:
        Email:
          type: string
        FirstName:
          type: string
        LastName:
          type: string
        OrganisationID:
          type: string
        Phone:
          type: string
      type: object
    Credentials:
      properties:
        UserLogin:
          description: The username for authentication.
          type: string
        UserType:
          description: The type of user.
          type: string
        Password:
          description: The user's password.
          format: password
          type: string
      required:
      - UserLogin
      - UserType
      - Password
      type: object
    DynamicField:
      properties:
        DynamicFieldID:
          type: string
        FieldType:
          type: string
        Label:
          type: string
        Name:
          type: string
        ObjectType:
          type: string
      type: object
    DynamicFieldCreate:
      properties:
        FieldType:
          type: string
        Label:
          type: string
        Name:
          type: string
        ObjectType:
          type: string
      required:
      - Name
      - Label
      - FieldType
      - ObjectType
      type: object
    DynamicFieldUpdate:
      properties:
        FieldType:
          type: string
        Label:
          type: string
        Name:
          type: string
        ObjectType:
          type: string
      type: object
    ExecPlan:
      properties:
        ExecPlanID:
          type: string
        Name:
          type: string
        Type:
          type: string
      type: object
    ExecPlanCreate:
      properties:
        Name:
          type: string
        Type:
          type: string
      required:
      - Name
      - Type
      type: object
    ExecPlanUpdate:
      properties:
        Name:
          type: string
        Type:
          type: string
      type: object
    FAQArticle:
      properties:
        CategoryID:
          type: string
        Content:
          type: string
        FAQArticleID:
          type: string
        Keywords:
          type: string
        Title:
          type: string
      type: object
    FAQArticleCreate:
      properties:
        CategoryID:
          type: string
        Content:
          type: string
        Keywords:
          type: string
        Title:
          type: string
      required:
      - Title
      - CategoryID
      - Content
      type: object
    FAQArticleUpdate:
      properties:
        CategoryID:
          type: string
        Content:
          type: string
        Keywords:
          type: string
        Title:
          type: string
      type: object
    GeneralCatalogItem:
      properties:
        Class:
          type: string
        GeneralCatalogItemID:
          type: string
        Name:
          type: string
      type: object
    GeneralCatalogItemCreate:
      properties:
        Class:
          type: string
        Name:
          type: string
      required:
      - Class
      - Name
      type: object
    GeneralCatalogItemUpdate:
      properties:
        Name:
          type: string
      type: object
    Job:
      properties:
        JobID:
          type: string
        Name:
          type: string
        Type:
          type: string
      type: object
    JobCreate:
      properties:
        Name:
          type: string
        Type:
          type: string
      required:
      - Name
      - Type
      type: object
    JobUpdate:
      properties:
        Name:
          type: string
        Type:
          type: string
      type: object
    Link:
      properties:
        LinkID:
          type: string
        SourceObject:
          type: string
        TargetObject:
          type: string
        Type:
          type: string
      type: object
    LinkCreate:
      properties:
        SourceObject:
          type: string
        TargetObject:
          type: string
        Type:
          type: string
      required:
      - SourceObject
      - TargetObject
      - Type
      type: object
    Lock:
      properties:
        LockID:
          type: string
        TicketID:
          type: string
        UserID:
          type: string
      type: object
    Macro:
      properties:
        MacroID:
          type: string
        Name:
          type: string
        Type:
          type: string
      type: object
    MacroCreate:
      properties:
        Name:
          type: string
        Type:
          type: string
      required:
      - Name
      - Type
      type: object
    MacroUpdate:
      properties:
        Name:
          type: string
        Type:
          type: string
      type: object
    MailAccount:
      properties:
        Host:
          type: string
        MailAccountID:
          type: string
        Type:
          type: string
        User:
          type: string
      type: object
    MailAccountCreate:
      properties:
        Host:
          type: string
        Password:
          type: string
        Type:
          type: string
        User:
          type: string
      required:
      - Host
      - User
      - Password
      type: object
    MailAccountUpdate:
      properties:
        Host:
          type: string
        Password:
          type: string
        Type:
          type: string
        User:
          type: string
      type: object
    MailFilter:
      properties:
        Action:
          type: object
        MailFilterID:
          type: string
        Match:
          type: object
        Name:
          type: string
      type: object
    MailFilterCreate:
      properties:
        Action:
          type: object
        Match:
          type: object
        Name:
          type: string
      required:
      - Name
      - Match
      - Action
      type: object
    MailFilterUpdate:
      properties:
        Action:
          type: object
        Match:
          type: object
        Name:
          type: string
      type: object
    Notification:
      properties:
        Body:
          type: string
        Event:
          type: string
        Name:
          type: string
        NotificationID:
          type: string
        Recipient:
          type: object
        Subject:
          type: string
        Transport:
          type: string
      type: object
    NotificationCreate:
      properties:
        Body:
          type: string
        Event:
          type: string
        Name:
          type: string
        Recipient:
          type: object
        Subject:
          type: string
        Transport:
          type: string
      required:
      - Name
      - Event
      - Transport
      type: object
    NotificationUpdate:
      properties:
        Body:
          type: string
        Event:
          type: string
        Name:
          type: string
        Recipient:
          type: object
        Subject:
          type: string
        Transport:
          type: string
      type: object
    ObjectIcon:
      properties:
        IconData:
          type: string
        Name:
          type: string
        ObjectIconID:
          type: string
      type: object
    ObjectIconCreate:
      properties:
        IconData:
          type: string
        Name:
          type: string
      required:
      - Name
      - IconData
      type: object
    ObjectIconUpdate:
      properties:
        IconData:
          type: string
        Name:
          type: string
      type: object
    ObjectTag:
      properties:
        Name:
          type: string
        ObjectTagID:
          type: string
      type: object
    ObjectTagCreate:
      properties:
        Name:
          type: string
      required:
      - Name
      type: object
    Organisation:
      properties:
        Address:
          type: string
        Name:
          type: string
        OrganisationID:
          type: string
        Website:
          type: string
      type: object
    OrganisationCreate:
      properties:
        Address:
          type: string
        Name:
          type: string
        Website:
          type: string
      required:
      - Name
      type: object
    OrganisationUpdate:
      properties:
        Address:
          type: string
        Name:
          type: string
        Website:
          type: string
      type: object
    Permission:
      properties:
        PermissionID:
          type: string
        PermissionKey:
          type: string
        PermissionValue:
          type: string
      type: object
    PermissionCreate:
      properties:
        PermissionKey:
          type: string
        PermissionValue:
          type: string
      required:
      - PermissionKey
      - PermissionValue
      type: object
    PermissionUpdate:
      properties:
        PermissionValue:
          type: string
      type: object
    Plugin:
      properties:
        IsActive:
          type: boolean
        Product:
          type: string
        Version:
          type: string
      type: object
    PluginUpdate:
      properties:
        IsActive:
          type: boolean
      type: object
    Priority:
      properties:
        Name:
          type: string
        PriorityID:
          type: string
      type: object
    PriorityCreate:
      properties:
        Name:
          type: string
      required:
      - Name
      type: object
    PriorityUpdate:
      properties:
        Name:
          type: string
      type: object
    Queue:
      properties:
        GroupID:
          type: string
        Name:
          type: string
        QueueID:
          type: string
        SystemAddressID:
          type: string
      type: object
    QueueCreate:
      properties:
        GroupID:
          type: string
        Name:
          type: string
        SystemAddressID:
          type: string
      required:
      - Name
      type: object
    QueueUpdate:
      properties:
        GroupID:
          type: string
        Name:
          type: string
        SystemAddressID:
          type: string
      type: object
    Report:
      properties:
        OutputFormat:
          type: string
        ReportDefinitionID:
          type: string
        ReportID:
          type: string
      type: object
    ReportCreate:
      properties:
        OutputFormat:
          type: string
        ReportDefinitionID:
          type: string
      required:
      - ReportDefinitionID
      - OutputFormat
      type: object
    ReportDefinition:
      properties:
        DataSource:
          type: string
        Name:
          type: string
        ReportDefinitionID:
          type: string
      type: object
    ReportDefinitionCreate:
      properties:
        DataSource:
          type: string
        Name:
          type: string
      required:
      - Name
      - DataSource
      type: object
    ReportDefinitionUpdate:
      properties:
        DataSource:
          type: string
        Name:
          type: string
      type: object
    Role:
      properties:
        Name:
          type: string
        RoleID:
          type: string
      type: object
    RoleCreate:
      properties:
        Name:
          type: string
      required:
      - Name
      type: object
    RoleUpdate:
      properties:
        Name:
          type: string
      type: object
    SenderType:
      properties:
        Name:
          type: string
        SenderTypeID:
          type: string
      type: object
    SessionInfo:
      properties:
        ChallengeToken:
          type: string
        SessionID:
          type: string
        UserFirstname:
          type: string
        UserID:
          type: string
        UserLastname:
          type: string
        UserLogin:
          type: string
      type: object
    SystemAddress:
      properties:
        Email:
          type: string
        RealName:
          type: string
        SystemAddressID:
          type: string
      type: object
    SystemAddressCreate:
      properties:
        Email:
          type: string
        RealName:
          type: string
      required:
      - Email
      type: object
    SystemAddressUpdate:
      properties:
        Email:
          type: string
        RealName:
          type: string
      type: object
    TextModule:
      properties:
        CategoryID:
          type: string
        Content:
          type: string
        Name:
          type: string
        TextModuleID:
          type: string
      type: object
    TextModuleCreate:
      properties:
        CategoryID:
          type: string
        Content:
          type: string
        Name:
          type: string
      required:
      - Name
      - Content
      type: object
    TextModuleUpdate:
      properties:
        CategoryID:
          type: string
        Content:
          type: string
        Name:
          type: string
      type: object
    Ticket:
      properties:
        Changed:
          format: date-time
          type: string
        Created:
          format: date-time
          type: string
        CustomerUser:
          type: string
        Owner:
          type: string
        Priority:
          type: string
        Queue:
          type: string
        State:
          type: string
        TicketID:
          type: string
        TicketNumber:
          type: string
        Title:
          type: string
      type: object
    TicketCreate:
      properties:
        Article:
          $ref: '#/components/schemas/Article'
        CustomerUser:
          type: string
        DynamicField:
          items:
            $ref: '#/components/schemas/DynamicField'
          type: array
        Queue:
          type: string
        Title:
          type: string
      required:
      - Title
      - Queue
      - CustomerUser
      - Article
      type: object
    TicketState:
      properties:
        Name:
          type: string
        StateID:
          type: string
        TypeID:
          type: string
      type: object
    TicketStateCreate:
      properties:
        Name:
          type: string
        TypeID:
          type: string
      required:
      - Name
      - TypeID
      type: object
    TicketStateUpdate:
      properties:
        Name:
          type: string
        TypeID:
          type: string
      type: object
    TicketType:
      properties:
        Name:
          type: string
        TypeID:
          type: string
      type: object
    TicketTypeCreate:
      properties:
        Name:
          type: string
      required:
      - Name
      type: object
    TicketTypeUpdate:
      properties:
        Name:
          type: string
      type: object
    TicketUpdate:
      properties:
        Owner:
          type: string
        Priority:
          type: string
        Queue:
          type: string
        State:
          type: string
        Title:
          type: string
      type: object
    TranslationPattern:
      properties:
        Pattern:
          type: string
        PatternID:
          type: string
      type: object
    TranslationPatternCreate:
      properties:
        Pattern:
          type: string
      required:
      - Pattern
      type: object
    TranslationPatternUpdate:
      properties:
        Pattern:
          type: string
      type: object
    User:
      properties:
        Email:
          type: string
        FirstName:
          type: string
        IsActive:
          type: boolean
        LastName:
          type: string
        Login:
          type: string
        UserID:
          type: string
      type: object
    UserCreate:
      properties:
        Email:
          type: string
        FirstName:
          type: string
        IsActive:
          default: true
          type: boolean
        LastName:
          type: string
        Login:
          type: string
      required:
      - Login
      - FirstName
      - LastName
      - Email
      type: object
    UserUpdate:
      properties:
        Email:
          type: string
        FirstName:
          type: string
        IsActive:
          type: boolean
        LastName:
          type: string
        Login:
          type: string
      type: object
    Valid:
      properties:
        IsValid:
          type: boolean
        Name:
          type: string
        ValidID:
          type: string
      type: object
    Watcher:
      properties:
        ObjectID:
          type: string
        ObjectType:
          type: string
        UserID:
          type: string
        WatcherID:
          type: string
      type: object
    WatcherCreate:
      properties:
        ObjectID:
          type: string
        ObjectType:
          type: string
        UserID:
          type: string
      required:
      - UserID
      - ObjectID
      - ObjectType
      type: object
    AuthRequest:
      type: object
      properties: {}
    AuthResponse:
      type: object
      properties: {}
    CertificateResponse:
      type: object
      properties: {}
    CertificateCollectionResponse:
      type: object
      properties: {}
    CertificatePostRequest:
      type: object
      properties: {}
    CertificatePostResponse:
      type: object
      properties: {}
    ChannelResponse:
      type: object
      properties: {}
    ChannelCollectionResponse:
      type: object
      properties: {}
    ClientRegistrationResponse:
      type: object
      properties: {}
    ClientRegistrationCollectionResponse:
      type: object
      properties: {}
    ClientRegistrationPostRequest:
      type: object
      properties: {}
    ClientRegistrationPostResponse:
      type: object
      properties: {}
    ConfigItemClassResponse:
      type: object
      properties: {}
    ConfigItemClassCollectionResponse:
      type: object
      properties: {}
    ConfigItemClassPostRequest:
      type: object
      properties: {}
    ConfigItemClassPatchRequest:
      type: object
      properties: {}
    ConfigItemClassPostPatchResponse:
      type: object
      properties: {}
    ConfigItemClassDefinitionResponse:
      type: object
      properties: {}
    ConfigItemClassDefinitionCollectionResponse:
      type: object
      properties: {}
    ConfigItemClassDefinitionPostRequest:
      type: object
      properties: {}
    ConfigItemClassDefinitionPostResponse:
      type: object
      properties: {}
    ConfigItemResponse:
      type: object
      properties: {}
    ConfigItemCollectionResponse:
      type: object
      properties: {}
    ConfigItemPostRequest:
      type: object
      properties: {}
    ConfigItemPatchRequest:
      type: object
      properties: {}
    ConfigItemPostPatchResponse:
      type: object
      properties: {}
    ConfigItemAttachmentResponse:
      type: object
      properties: {}
    ConfigItemHistoryResponse:
      type: object
      properties: {}
    ConfigItemHistoryCollectionResponse:
      type: object
      properties: {}
    ConfigItemImageResponse:
      type: object
      properties: {}
    ConfigItemImageCollectionResponse:
      type: object
      properties: {}
    ConfigItemImagePostRequest:
      type: object
      properties: {}
    ConfigItemImagePostResponse:
      type: object
      properties: {}
    ConfigItemLinkGraphPostRequest:
      type: object
      properties: {}
    ConfigItemLinkGraphPostResponse:
      type: object
      properties: {}
    ConfigItemVersionResponse:
      type: object
      properties: {}
    ConfigItemVersionCollectionResponse:
      type: object
      properties: {}
    ConfigItemVersionPostRequest:
      type: object
      properties: {}
    ConfigItemVersionPostResponse:
      type: object
      properties: {}
    ConsoleCommandResponse:
      type: object
      properties: {}
    ConsoleCommandCollectionResponse:
      type: object
      properties: {}
    ConsoleCommandPostRequest:
      type: object
      properties: {}
    ConsoleCommandPostResponse:
      type: object
      properties: {}
    ConsoleFileResponse:
      type: object
      properties: {}
    ConsoleFileCollectionResponse:
      type: object
      properties: {}
    ConsoleFilePostRequest:
      type: object
      properties: {}
    ConsoleFilePostResponse:
      type: object
      properties: {}
    ContactResponse:
      type: object
      properties: {}
    ContactCollectionResponse:
      type: object
      properties: {}
    ContactPostRequest:
      type: object
      properties: {}
    ContactPatchRequest:
      type: object
      properties: {}
    ContactPostPatchResponse:
      type: object
      properties: {}
    CounterResponse:
      type: object
      properties: {}
    DataSourceResponse:
      type: object
      properties: {}
    DataSourceCollectionResponse:
      type: object
      properties: {}
    DynamicFieldResponse:
      type: object
      properties: {}
    DynamicFieldCollectionResponse:
      type: object
      properties: {}
    DynamicFieldPostRequest:
      type: object
      properties: {}
    DynamicFieldPatchRequest:
      type: object
      properties: {}
    DynamicFieldPostPatchResponse:
      type: object
      properties: {}
    DynamicFieldConfigResponse:
      type: object
      properties: {}
    DynamicFieldConfigPatchRequest:
      type: object
      properties: {}
    DynamicFieldConfigPatchResponse:
      type: object
      properties: {}
    DynamicFieldObjectTypeCollectionResponse:
      type: object
      properties: {}
    DynamicFieldTypeCollectionResponse:
      type: object
      properties: {}
    Error:
      type: object
      properties: {}
    ExecPlanResponse:
      type: object
      properties: {}
    ExecPlanCollectionResponse:
      type: object
      properties: {}
    ExecPlanPostRequest:
      type: object
      properties: {}
    ExecPlanPatchRequest:
      type: object
      properties: {}
    ExecPlanPostPatchResponse:
      type: object
      properties: {}
    ExecPlanTypeResponse:
      type: object
      properties: {}
    ExecPlanTypeCollectionResponse:
      type: object
      properties: {}
    FAQArticleResponse:
      type: object
      properties: {}
    FAQArticleCollectionResponse:
      type: object
      properties: {}
    FAQArticlePostRequest:
      type: object
      properties: {}
    FAQArticlePatchRequest:
      type: object
      properties: {}
    FAQArticlePostPatchResponse:
      type: object
      properties: {}
    FAQAttachmentResponse:
      type: object
      properties: {}
    FAQAttachmentCollectionResponse:
      type: object
      properties: {}
    FAQAttachmentPostRequest:
      type: object
      properties: {}
    FAQAttachmentPostPatchResponse:
      type: object
      properties: {}
    FAQCategoryResponse:
      type: object
      properties: {}
    FAQCategoryCollectionResponse:
      type: object
      properties: {}
    FAQCategoryPostRequest:
      type: object
      properties: {}
    FAQCategoryPatchRequest:
      type: object
      properties: {}
    FAQCategoryPostPatchResponse:
      type: object
      properties: {}
    FAQHistoryResponse:
      type: object
      properties: {}
    FAQHistoryCollectionResponse:
      type: object
      properties: {}
    FAQVoteResponse:
      type: object
      properties: {}
    FAQVoteCollectionResponse:
      type: object
      properties: {}
    FAQVotePostRequest:
      type: object
      properties: {}
    FAQVotePostPatchResponse:
      type: object
      properties: {}
    FAQKeywordCollectionResponse:
      type: object
      properties: {}
    FollowUpTypeCollectionResponse:
      type: object
      properties: {}
    GeneralCatalogClassCollectionResponse:
      type: object
      properties: {}
    GeneralCatalogClassPatchRequest:
      type: object
      properties: {}
    GeneralCatalogClassPatchResponse:
      type: object
      properties: {}
    GeneralCatalogItemResponse:
      type: object
      properties: {}
    GeneralCatalogItemCollectionResponse:
      type: object
      properties: {}
    GeneralCatalogItemPostRequest:
      type: object
      properties: {}
    GeneralCatalogItemPatchRequest:
      type: object
      properties: {}
    GeneralCatalogItemPostPatchResponse:
      type: object
      properties: {}
    HTMLToPDFConvertResponse:
      type: object
      properties: {}
    ImportExportTemplateResponse:
      type: object
      properties: {}
    ImportExportTemplateCollectionResponse:
      type: object
      properties: {}
    ImportExportTemplateRunCollectionResponse:
      type: object
      properties: {}
    ImportExportTemplateRunPostRequest:
      type: object
      properties: {}
    ImportExportTemplateRunPostResponse:
      type: object
      properties: {}
    JobResponse:
      type: object
      properties: {}
    JobCollectionResponse:
      type: object
      properties: {}
    JobPostRequest:
      type: object
      properties: {}
    JobPatchRequest:
      type: object
      properties: {}
    JobPostPatchResponse:
      type: object
      properties: {}
    JobTypeResponse:
      type: object
      properties: {}
    JobExecPlanIDCollectionResponse:
      type: object
      properties: {}
    JobExecPlanIDPostRequest:
      type: object
      properties: {}
    JobExecPlanIDPostResponse:
      type: object
      properties: {}
    JobMacroIDCollectionResponse:
      type: object
      properties: {}
    JobMacroIDPostRequest:
      type: object
      properties: {}
    JobMacroIDPostResponse:
      type: object
      properties: {}
    JobRunResponse:
      type: object
      properties: {}
    JobRunCollectionResponse:
      type: object
      properties: {}
    JobRunLogCollectionResponse:
      type: object
      properties: {}
    LinkResponse:
      type: object
      properties: {}
    LinkCollectionResponse:
      type: object
      properties: {}
    LinkPostRequest:
      type: object
      properties: {}
    LinkPostResponse:
      type: object
      properties: {}
    LinkTypeCollectionResponse:
      type: object
      properties: {}
    LogFileResponse:
      type: object
      properties: {}
    LogFileCollectionResponse:
      type: object
      properties: {}
    LockResponse:
      type: object
      properties: {}
    LockCollectionResponse:
      type: object
      properties: {}
    MacroResponse:
      type: object
      properties: {}
    MacroCollectionResponse:
      type: object
      properties: {}
    MacroPostRequest:
      type: object
      properties: {}
    MacroPatchRequest:
      type: object
      properties: {}
    MacroPostPatchResponse:
      type: object
      properties: {}
    MacroTypeResponse:
      type: object
      properties: {}
    MacroActionResponse:
      type: object
      properties: {}
    MacroActionCollectionResponse:
      type: object
      properties: {}
    MacroActionPostRequest:
      type: object
      properties: {}
    MacroActionPatchRequest:
      type: object
      properties: {}
    MacroActionPostPatchResponse:
      type: object
      properties: {}
    MacroActionTypeResponse:
      type: object
      properties: {}
    MacroActionTypeCollectionResponse:
      type: object
      properties: {}
    MailAccountResponse:
      type: object
      properties: {}
    MailAccountCollectionResponse:
      type: object
      properties: {}
    MailAccountPostRequest:
      type: object
      properties: {}
    MailAccountPatchRequest:
      type: object
      properties: {}
    MailAccountPostPatchResponse:
      type: object
      properties: {}
    MailAccountTypeCollectionResponse:
      type: object
      properties: {}
    MailFilterResponse:
      type: object
      properties: {}
    MailFilterCollectionResponse:
      type: object
      properties: {}
    MailFilterPostRequest:
      type: object
      properties: {}
    MailFilterPatchRequest:
      type: object
      properties: {}
    MailFilterPostPatchResponse:
      type: object
      properties: {}
    MarkObjectAsSeenPostRequest:
      type: object
      properties: {}
    NotificationResponse:
      type: object
      properties: {}
    NotificationCollectionResponse:
      type: object
      properties: {}
    NotificationPostRequest:
      type: object
      properties: {}
    NotificationPatchRequest:
      type: object
      properties: {}
    NotificationPostPatchResponse:
      type: object
      properties: {}
    OAuth2AuthCodePostRequest:
      type: object
      properties: {}
    OAuth2AuthCodePostResponse:
      type: object
      properties: {}
    OAuth2ProfileResponse:
      type: object
      properties: {}
    OAuth2ProfileCollectionResponse:
      type: object
      properties: {}
    OAuth2ProfilePostRequest:
      type: object
      properties: {}
    OAuth2ProfilePatchRequest:
      type: object
      properties: {}
    OAuth2ProfilePostPatchResponse:
      type: object
      properties: {}
    OAuth2ProfileAuthURLResponse:
      type: object
      properties: {}
    ObjectIconResponse:
      type: object
      properties: {}
    ObjectIconCollectionResponse:
      type: object
      properties: {}
    ObjectIconPostRequest:
      type: object
      properties: {}
    ObjectIconPatchRequest:
      type: object
      properties: {}
    ObjectIconPostPatchResponse:
      type: object
      properties: {}
    ObjectSearchSupportedAttributesCollectionResponse:
      type: object
      properties: {}
    ObjectSearchSupportedAttributesResponse:
      type: object
      properties: {}
    OrganisationResponse:
      type: object
      properties: {}
    OrganisationCollectionResponse:
      type: object
      properties: {}
    OrganisationPostRequest:
      type: object
      properties: {}
    OrganisationPatchRequest:
      type: object
      properties: {}
    OrganisationPostPatchResponse:
      type: object
      properties: {}
    OutputFormatResponse:
      type: object
      properties: {}
    OutputFormatCollectionResponse:
      type: object
      properties: {}
    PermissionResponse:
      type: object
      properties: {}
    PermissionCollectionResponse:
      type: object
      properties: {}
    PermissionPostRequest:
      type: object
      properties: {}
    PermissionPatchRequest:
      type: object
      properties: {}
    PermissionPostPatchResponse:
      type: object
      properties: {}
    PermissionTypeCollectionResponse:
      type: object
      properties: {}
    PriorityResponse:
      type: object
      properties: {}
    PriorityCollectionResponse:
      type: object
      properties: {}
    PriorityPostRequest:
      type: object
      properties: {}
    PriorityPatchRequest:
      type: object
      properties: {}
    PriorityPostPatchResponse:
      type: object
      properties: {}
    QueueResponse:
      type: object
      properties: {}
    QueueCollectionResponse:
      type: object
      properties: {}
    QueuePostRequest:
      type: object
      properties: {}
    QueuePatchRequest:
      type: object
      properties: {}
    QueuePostPatchResponse:
      type: object
      properties: {}
    ReportResponse:
      type: object
      properties: {}
    ReportCollectionResponse:
      type: object
      properties: {}
    ReportPostRequest:
      type: object
      properties: {}
    ReportPostResponse:
      type: object
      properties: {}
    ReportDefinitionResponse:
      type: object
      properties: {}
    ReportDefinitionCollectionResponse:
      type: object
      properties: {}
    ReportDefinitionPostRequest:
      type: object
      properties: {}
    ReportDefinitionPatchRequest:
      type: object
      properties: {}
    ReportDefinitionPostPatchResponse:
      type: object
      properties: {}
    ReportResultResponse:
      type: object
      properties: {}
    ReportResultCollectionResponse:
      type: object
      properties: {}
    RoleResponse:
      type: object
      properties: {}
    RoleCollectionResponse:
      type: object
      properties: {}
    RolePostRequest:
      type: object
      properties: {}
    RolePatchRequest:
      type: object
      properties: {}
    RolePostPatchResponse:
      type: object
      properties: {}
    RoleUserIDCollectionResponse:
      type: object
      properties: {}
    RoleUserIDPostRequest:
      type: object
      properties: {}
    RoleUserIDPostResponse:
      type: object
      properties: {}
    SenderTypeResponse:
      type: object
      properties: {}
    SenderTypeCollectionResponse:
      type: object
      properties: {}
    ServiceResponse:
      type: object
      properties: {}
    ServiceCollectionResponse:
      type: object
      properties: {}
    ServicePostRequest:
      type: object
      properties: {}
    ServicePatchRequest:
      type: object
      properties: {}
    ServicePostPatchResponse:
      type: object
      properties: {}
    SessionResponse:
      type: object
      properties: {}
    StateTypeResponse:
      type: object
      properties: {}
    StateTypeCollectionResponse:
      type: object
      properties: {}
    SysConfigOptionResponse:
      type: object
      properties: {}
    SysConfigOptionCollectionResponse:
      type: object
      properties: {}
    SysConfigOptionPatchRequest:
      type: object
      properties: {}
    SysConfigOptionPatchResponse:
      type: object
      properties: {}
    SysConfigOptionDefinitionResponse:
      type: object
      properties: {}
    SysConfigOptionDefinitionCollectionResponse:
      type: object
      properties: {}
    SysConfigOptionDefinitionPostRequest:
      type: object
      properties: {}
    SysConfigOptionDefinitionPatchRequest:
      type: object
      properties: {}
    SysConfigOptionDefinitionPostPatchResponse:
      type: object
      properties: {}
    SysConfigOptionTypeCollectionResponse:
      type: object
      properties: {}
    SystemAddressResponse:
      type: object
      properties: {}
    SystemAddressCollectionResponse:
      type: object
      properties: {}
    SystemAddressPostRequest:
      type: object
      properties: {}
    SystemAddressPatchRequest:
      type: object
      properties: {}
    SystemAddressPostPatchResponse:
      type: object
      properties: {}
    TextModuleResponse:
      type: object
      properties: {}
    TextModuleCollectionResponse:
      type: object
      properties: {}
    TextModulePostRequest:
      type: object
      properties: {}
    TextModulePatchRequest:
      type: object
      properties: {}
    TextModulePostPatchResponse:
      type: object
      properties: {}
    TextModuleCategoryCollectionResponse:
      type: object
      properties: {}
    TicketResponse:
      type: object
      properties: {}
    TicketCollectionResponse:
      type: object
      properties: {}
    TicketPostRequest:
      type: object
      properties: {}
    TicketPatchRequest:
      type: object
      properties: {}
    TicketPostPatchResponse:
      type: object
      properties: {}
    TicketArticleResponse:
      type: object
      properties: {}
    TicketArticleCollectionResponse:
      type: object
      properties: {}
    TicketArticlePostRequest:
      type: object
      properties: {}
    TicketArticlePatchRequest:
      type: object
      properties: {}
    TicketArticlePostPatchResponse:
      type: object
      properties: {}
    TicketArticleAttachmentResponse:
      type: object
      properties: {}
    TicketArticleAttachmentCollectionResponse:
      type: object
      properties: {}
    TicketArticleAttachmentPostRequest:
      type: object
      properties: {}
    TicketArticleAttachmentPostResponse:
      type: object
      properties: {}
    TicketArticleAttachmentZipResponse:
      type: object
      properties: {}
    TicketArticleFlagResponse:
      type: object
      properties: {}
    TicketArticleFlagCollectionResponse:
      type: object
      properties: {}
    TicketArticleFlagPostRequest:
      type: object
      properties: {}
    TicketArticleFlagPatchRequest:
      type: object
      properties: {}
    TicketArticleFlagPostPatchResponse:
      type: object
      properties: {}
    TicketHistoryResponse:
      type: object
      properties: {}
    TicketHistoryCollectionResponse:
      type: object
      properties: {}
    TicketStateResponse:
      type: object
      properties: {}
    TicketStateCollectionResponse:
      type: object
      properties: {}
    TicketStatePostRequest:
      type: object
      properties: {}
    TicketStatePatchRequest:
      type: object
      properties: {}
    TicketStatePostPatchResponse:
      type: object
      properties: {}
    TicketTypeResponse:
      type: object
      properties: {}
    TicketTypeCollectionResponse:
      type: object
      properties: {}
    TicketTypePostRequest:
      type: object
      properties: {}
    TicketTypePatchRequest:
      type: object
      properties: {}
    TicketTypePostPatchResponse:
      type: object
      properties: {}
    TranslationCollectionResponse:
      type: object
      properties: {}
    TranslationLanguageResponse:
      type: object
      properties: {}
    TranslationLanguageCollectionResponse:
      type: object
      properties: {}
    TranslationLanguagePostRequest:
      type: object
      properties: {}
    TranslationLanguagePatchRequest:
      type: object
      properties: {}
    TranslationLanguagePostPatchResponse:
      type: object
      properties: {}
    TranslationPatternResponse:
      type: object
      properties: {}
    TranslationPatternCollectionResponse:
      type: object
      properties: {}
    TranslationPatternPostRequest:
      type: object
      properties: {}
    TranslationPatternPatchRequest:
      type: object
      properties: {}
    TranslationPatternPostPatchResponse:
      type: object
      properties: {}
    UserResponse:
      type: object
      properties: {}
    UserCollectionResponse:
      type: object
      properties: {}
    UserPostRequest:
      type: object
      properties: {}
    UserPatchRequest:
      type: object
      properties: {}
    UserPostPatchResponse:
      type: object
      properties: {}
    UserPreferenceResponse:
      type: object
      properties: {}
    UserPreferenceCollectionResponse:
      type: object
      properties: {}
    UserPreferencePostRequest:
      type: object
      properties: {}
    UserPreferencePatchRequest:
      type: object
      properties: {}
    UserPreferencePostPatchResponse:
      type: object
      properties: {}
    UserRoleIDCollectionResponse:
      type: object
      properties: {}
    UserRoleIDPostRequest:
      type: object
      properties: {}
    UserRoleIDPostResponse:
      type: object
      properties: {}
    ValidResponse:
      type: object
      properties: {}
    ValidCollectionResponse:
      type: object
      properties: {}
    VirtualFSResponse:
      type: object
      properties: {}
    WatcherCollectionResponse:
      type: object
      properties: {}
    WatcherPostRequest:
      type: object
      properties: {}
    WatcherPostResponse:
      type: object
      properties: {}
info:
  description: Standard API documentation for the KIX-REST API.
  title: KIX-REST API
  version: v1
openapi: 3.0.0
paths:
  /auth:
    get:
      description: Retrieves information about the current authentication status.
        Can be used to check if a session token is still valid.
      operationId: AuthGet
      responses:
        '200':
          content:
            application/json:
              example:
                Authenticated: true
              schema:
                properties:
                  Authenticated:
                    description: True if the user is authenticated, otherwise false.
                    type: boolean
                type: object
          description: Authentication status retrieved. Indicates if the session is
            active.
        '401':
          description: Not authenticated.
      security: []
      summary: Get Authentication Info
      tags:
      - Session
    post:
      description: Authenticates a user and creates a new session, returning an authentication
        token. This is the primary endpoint for logging in.
      operationId: SessionCreate
      requestBody:
        content:
          application/json:
            example:
              UserLogin: root@localhost
              UserType: Agent
              Password: root
            schema:
              $ref: '#/components/schemas/Credentials'
        description: User credentials for authentication.
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                Token: ab...yz
              schema:
                properties:
                  Token:
                    description: The authentication token for the session.
                    type: string
                type: object
          description: Session successfully created.
        '401':
          description: Invalid credentials.
      security: []
      summary: Create a new session
      tags:
      - Session
  /clientregistrations:
    get:
      description: Retrieves a list of client registrations.
      operationId: ClientRegistrationSearch
      responses:
        '200':
          description: A list of client registrations.
        '401':
          description: Unauthorized.
      summary: Search for client registrations
      tags:
      - Client Registrations
  /clientregistrations/{ClientID}:
    get:
      description: Retrieves the details of a specific client registration.
      operationId: ClientRegistrationGet
      parameters:
      - description: The unique identifier of the client.
        in: path
        name: ClientID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Client registration details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific client registration
      tags:
      - Client Registrations
  /cmdb/configitems:
    get:
      description: Retrieves a list of configuration items.
      operationId: ConfigItemSearch
      responses:
        '200':
          content:
            application/json:
              example:
                ConfigItem:
                - ClassID: '3'
                  ConfigItemID: '101'
                  DeploymentState: Production
                  Name: Server-01
              schema:
                properties:
                  ConfigItem:
                    items:
                      $ref: '#/components/schemas/ConfigItem'
                    type: array
                type: object
          description: A list of configuration items.
        '401':
          description: Unauthorized.
      summary: Search for CMDB configuration items
      tags:
      - CMDB
    post:
      description: Creates a new configuration item.
      operationId: ConfigItemCreate
      requestBody:
        content:
          application/json:
            example:
              ClassID: '3'
              DeploymentState: Testing
              Name: Server-02
            schema:
              $ref: '#/components/schemas/ConfigItemCreate'
        description: The configuration item object to be created.
        required: true
      responses:
        '201':
          description: The configuration item was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new configuration item
      tags:
      - CMDB
  /cmdb/configitems/{ConfigItemID}:
    delete:
      description: Deletes a specific configuration item.
      operationId: ConfigItemDelete
      parameters:
      - description: The unique identifier of the configuration item to delete.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The configuration item was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a configuration item
      tags:
      - CMDB
    get:
      description: Retrieves the details of a specific configuration item.
      operationId: ConfigItemGet
      parameters:
      - description: The unique identifier of the configuration item.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                ClassID: '3'
                ConfigItemID: '101'
                DeploymentState: Production
                Name: Server-01
              schema:
                $ref: '#/components/schemas/ConfigItem'
          description: Configuration item details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific configuration item
      tags:
      - CMDB
    patch:
      description: Updates an existing configuration item.
      operationId: ConfigItemUpdate
      parameters:
      - description: The unique identifier of the configuration item to update.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              DeploymentState: Archived
              Name: Server-01-Renamed
            schema:
              $ref: '#/components/schemas/ConfigItemUpdate'
        description: The configuration item attributes to update.
        required: true
      responses:
        '200':
          description: The configuration item was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a configuration item
      tags:
      - CMDB
  /cmdb/configitems/{ConfigItemID}/history:
    get:
      description: Retrieves the history of a specific configuration item.
      operationId: ConfigItemHistorySearch
      parameters:
      - description: The ID of the configuration item.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of history entries.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get configuration item history
      tags:
      - CMDB
  /cmdb/configitems/{ConfigItemID}/history/{HistoryID}:
    get:
      description: Retrieves a specific history entry for a configuration item.
      operationId: ConfigItemHistoryGet
      parameters:
      - description: The ID of the configuration item.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      - description: The ID of the history entry.
        in: path
        name: HistoryID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: History entry details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific configuration item history entry
      tags:
      - CMDB
  /cmdb/configitems/{ConfigItemID}/images:
    get:
      description: Retrieves a list of images for a specific configuration item.
      operationId: ConfigItemImageSearch
      parameters:
      - description: The ID of the configuration item.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of images.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get configuration item images
      tags:
      - CMDB
  /cmdb/configitems/{ConfigItemID}/images/{ImageID}:
    get:
      description: Retrieves a specific image for a configuration item.
      operationId: ConfigItemImageGet
      parameters:
      - description: The ID of the configuration item.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      - description: The ID of the image.
        in: path
        name: ImageID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Image details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a configuration item image
      tags:
      - CMDB
  /cmdb/configitems/{ConfigItemID}/versions:
    get:
      description: Retrieves a list of versions for a specific configuration item.
      operationId: ConfigItemVersionSearch
      parameters:
      - description: The ID of the configuration item.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of versions.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get configuration item versions
      tags:
      - CMDB
  /cmdb/configitems/{ConfigItemID}/versions/{VersionID}:
    get:
      description: Retrieves a specific version for a configuration item.
      operationId: ConfigItemVersionGet
      parameters:
      - description: The ID of the configuration item.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      - description: The ID of the version.
        in: path
        name: VersionID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Version details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific configuration item version
      tags:
      - CMDB
  /cmdb/configitems/{ConfigItemID}/versions/{VersionID}/attachments/{AttachmentID}:
    get:
      description: Retrieves a specific attachment for a configuration item version.
      operationId: ConfigItemAttachmentGet
      parameters:
      - description: The ID of the configuration item.
        in: path
        name: ConfigItemID
        required: true
        schema:
          type: string
      - description: The ID of the version.
        in: path
        name: VersionID
        required: true
        schema:
          type: string
      - description: The ID of the attachment.
        in: path
        name: AttachmentID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Attachment details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a configuration item version attachment
      tags:
      - CMDB
  /contacts:
    get:
      description: Retrieves a list of contacts.
      operationId: ContactSearch
      responses:
        '200':
          content:
            application/json:
              example:
                Contact:
                - ContactID: '4711'
                  Email: john.doe@example.com
                  FirstName: John
                  LastName: Doe
                  OrganisationID: '5'
                  Phone: +1 123-456-7890
                - ContactID: '4712'
                  Email: jane.doe@example.com
                  FirstName: Jane
                  LastName: Doe
                  OrganisationID: '5'
                  Phone: +1 123-456-7891
              schema:
                properties:
                  Contact:
                    items:
                      $ref: '#/components/schemas/Contact'
                    type: array
                type: object
          description: A list of contacts.
        '401':
          description: Unauthorized.
      summary: Search for contacts
      tags:
      - Contacts
    post:
      description: Creates a new contact.
      operationId: ContactCreate
      requestBody:
        content:
          application/json:
            example:
              Email: john.doe@example.com
              FirstName: John
              LastName: Doe
              OrganisationID: '5'
              Phone: +1 123-456-7890
            schema:
              $ref: '#/components/schemas/ContactCreate'
        description: The contact object to be created.
        required: true
      responses:
        '201':
          description: The contact was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new contact
      tags:
      - Contacts
  /contacts/{ContactID}:
    delete:
      description: Deletes a specific contact.
      operationId: ContactDelete
      parameters:
      - description: The unique identifier of the contact to delete.
        in: path
        name: ContactID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The contact was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a contact
      tags:
      - Contacts
    get:
      description: Retrieves the details of a specific contact.
      operationId: ContactGet
      parameters:
      - description: The unique identifier of the contact.
        in: path
        name: ContactID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                ContactID: '4711'
                Email: john.doe@example.com
                FirstName: John
                LastName: Doe
                OrganisationID: '5'
                Phone: +1 123-456-7890
              schema:
                $ref: '#/components/schemas/Contact'
          description: Contact details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific contact
      tags:
      - Contacts
    patch:
      description: Updates an existing contact.
      operationId: ContactUpdate
      parameters:
      - description: The unique identifier of the contact to update.
        in: path
        name: ContactID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Email: jane.dorian@example.com
              LastName: Dorian
            schema:
              $ref: '#/components/schemas/ContactUpdate'
        description: The contact attributes to update.
        required: true
      responses:
        '200':
          description: The contact was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a contact
      tags:
      - Contacts
  /contacts/{ContactID}/tickets:
    get:
      description: Retrieves tickets associated with a specific contact.
      operationId: ContactTicketSearch
      parameters:
      - description: The unique identifier of the contact.
        in: path
        name: ContactID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Ticket:
                - Changed: '2014-07-01 12:00:00'
                  Created: '2014-07-01 12:00:00'
                  CustomerUser: test
                  Owner: root@localhost
                  Priority: 3 normal
                  Queue: Service
                  State: new
                  TicketID: '4711'
                  TicketNumber: '2014070110123456'
                  Title: REST-API Test
              schema:
                properties:
                  Ticket:
                    items:
                      $ref: '#/components/schemas/Ticket'
                    type: array
                type: object
          description: A list of tickets.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get tickets for a contact
      tags:
      - Contacts
  /faq/articles:
    get:
      description: Retrieves a list of FAQ articles.
      operationId: FAQArticleSearch
      responses:
        '200':
          content:
            application/json:
              example:
                FAQArticle:
                - CategoryID: '2'
                  Content: Go to settings and click 'Reset Password'.
                  FAQArticleID: '1'
                  Keywords: password, reset
                  Title: How to reset password
              schema:
                properties:
                  FAQArticle:
                    items:
                      $ref: '#/components/schemas/FAQArticle'
                    type: array
                type: object
          description: A list of FAQ articles.
        '401':
          description: Unauthorized.
      summary: Search for FAQ articles
      tags:
      - FAQ
    post:
      description: Creates a new FAQ article.
      operationId: FAQArticleCreate
      requestBody:
        content:
          application/json:
            example:
              CategoryID: '1'
              Content: To create a ticket, go to the 'Tickets' section and click 'New
                Ticket'.
              Keywords: ticket, create
              Title: How to create a ticket
            schema:
              $ref: '#/components/schemas/FAQArticleCreate'
        description: The FAQ article object to be created.
        required: true
      responses:
        '201':
          description: The FAQ article was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new FAQ article
      tags:
      - FAQ
  /faq/articles/keywords:
    get:
      description: Retrieves a list of keywords from all FAQ articles.
      operationId: FAQArticleKeywordSearch
      responses:
        '200':
          description: A list of keywords.
        '401':
          description: Unauthorized.
      summary: Search for FAQ article keywords
      tags:
      - FAQ
  /faq/articles/{FAQArticleID}:
    delete:
      description: Deletes a specific FAQ article.
      operationId: FAQArticleDelete
      parameters:
      - description: The unique identifier of the FAQ article to delete.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The FAQ article was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete an FAQ article
      tags:
      - FAQ
    get:
      description: Retrieves the details of a specific FAQ article.
      operationId: FAQArticleGet
      parameters:
      - description: The unique identifier of the FAQ article.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                CategoryID: '2'
                Content: Go to settings and click 'Reset Password'.
                FAQArticleID: '1'
                Keywords: password, reset
                Title: How to reset password
              schema:
                $ref: '#/components/schemas/FAQArticle'
          description: FAQ article details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific FAQ article
      tags:
      - FAQ
    patch:
      description: Updates an existing FAQ article.
      operationId: FAQArticleUpdate
      parameters:
      - description: The unique identifier of the FAQ article to update.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Keywords: password, reset, account
              Title: How to reset your password
            schema:
              $ref: '#/components/schemas/FAQArticleUpdate'
        description: The FAQ article attributes to update.
        required: true
      responses:
        '200':
          description: The FAQ article was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update an FAQ article
      tags:
      - FAQ
  /faq/articles/{FAQArticleID}/attachments:
    get:
      description: Retrieves a list of attachments for a specific FAQ article.
      operationId: FAQArticleAttachmentSearch
      parameters:
      - description: The ID of the FAQ article.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of attachments.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get FAQ article attachments
      tags:
      - FAQ
  /faq/articles/{FAQArticleID}/attachments/{FAQAttachmentID}:
    get:
      description: Retrieves a specific attachment for an FAQ article.
      operationId: FAQArticleAttachmentGet
      parameters:
      - description: The ID of the FAQ article.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      - description: The ID of the attachment.
        in: path
        name: FAQAttachmentID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Attachment details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific FAQ article attachment
      tags:
      - FAQ
  /faq/articles/{FAQArticleID}/history:
    get:
      description: Retrieves the history of a specific FAQ article.
      operationId: FAQArticleHistorySearch
      parameters:
      - description: The ID of the FAQ article.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of history entries.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get FAQ article history
      tags:
      - FAQ
  /faq/articles/{FAQArticleID}/history/{FAQHistoryID}:
    get:
      description: Retrieves a specific history entry for an FAQ article.
      operationId: FAQArticleHistoryGet
      parameters:
      - description: The ID of the FAQ article.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      - description: The ID of the history entry.
        in: path
        name: FAQHistoryID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: History entry details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific FAQ article history entry
      tags:
      - FAQ
  /faq/articles/{FAQArticleID}/votes:
    get:
      description: Retrieves a list of votes for a specific FAQ article.
      operationId: FAQArticleVoteSearch
      parameters:
      - description: The ID of the FAQ article.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of votes.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get votes for an FAQ article
      tags:
      - FAQ
  /faq/articles/{FAQArticleID}/votes/{FAQVoteID}:
    get:
      description: Retrieves a specific vote for an FAQ article.
      operationId: FAQArticleVoteGet
      parameters:
      - description: The ID of the FAQ article.
        in: path
        name: FAQArticleID
        required: true
        schema:
          type: string
      - description: The ID of the vote.
        in: path
        name: FAQVoteID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Vote details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific vote for an FAQ article
      tags:
      - FAQ
  /i18n/translations:
    get:
      description: Retrieves a list of translations.
      operationId: TranslationSearch
      responses:
        '200':
          description: A list of translations.
        '401':
          description: Unauthorized.
      summary: Search for translations
      tags:
      - i18n
  /links:
    get:
      description: Retrieves a list of links.
      operationId: LinkSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Link:
                    items:
                      $ref: '#/components/schemas/Link'
                    type: array
                type: object
          description: A list of links.
        '401':
          description: Unauthorized.
      summary: Search for links
      tags:
      - Links
    post:
      description: Creates a new link between objects.
      operationId: LinkCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkCreate'
        description: The link object to be created.
        required: true
      responses:
        '201':
          description: The link was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new link
      tags:
      - Links
  /links/types:
    get:
      description: Retrieves a list of possible link types.
      operationId: LinkTypeSearch
      responses:
        '200':
          description: A list of link types.
        '401':
          description: Unauthorized.
      summary: Get link types
      tags:
      - Links
  /links/{LinkID}:
    delete:
      description: Deletes a specific link.
      operationId: LinkDelete
      parameters:
      - description: The unique identifier of the link to delete.
        in: path
        name: LinkID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The link was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a link
      tags:
      - Links
    get:
      description: Retrieves the details of a specific link.
      operationId: LinkGet
      parameters:
      - description: The unique identifier of the link.
        in: path
        name: LinkID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
          description: Link details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific link
      tags:
      - Links
  /objectsearch/{ObjectType}:
    get:
      description: Retrieves a list of supported attributes for a given object type
        that can be used in searches.
      operationId: SupportedAttributesGet
      parameters:
      - description: The type of object to get searchable attributes for.
        in: path
        name: ObjectType
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of supported attributes.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get supported attributes for an object type
      tags:
      - Object Search
  /objecttags:
    get:
      description: Retrieves a list of object tags.
      operationId: ObjectTagSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ObjectTag:
                    items:
                      $ref: '#/components/schemas/ObjectTag'
                    type: array
                type: object
          description: A list of object tags.
        '401':
          description: Unauthorized.
      summary: Search for object tags
      tags:
      - Object Tags
    post:
      description: Creates a new object tag.
      operationId: ObjectTagCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectTagCreate'
        description: The object tag to be created.
        required: true
      responses:
        '201':
          description: The object tag was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new object tag
      tags:
      - Object Tags
  /objecttags/taglinks:
    get:
      description: Retrieves a list of object tag links.
      operationId: ObjectTagLinkSearch
      responses:
        '200':
          description: A list of object tag links.
        '401':
          description: Unauthorized.
      summary: Search for object tag links
      tags:
      - Object Tags
  /objecttags/{ObjectTagID}:
    delete:
      description: Deletes a specific object tag.
      operationId: ObjectTagDelete
      parameters:
      - description: The unique identifier of the object tag to delete.
        in: path
        name: ObjectTagID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The object tag was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete an object tag
      tags:
      - Object Tags
    get:
      description: Retrieves the details of a specific object tag.
      operationId: ObjectTagGet
      parameters:
      - description: The unique identifier of the object tag.
        in: path
        name: ObjectTagID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectTag'
          description: Object tag details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific object tag
      tags:
      - Object Tags
  /organisations:
    get:
      description: Retrieves a list of organisations.
      operationId: OrganisationSearch
      responses:
        '200':
          content:
            application/json:
              example:
                Organisation:
                - Address: 123 Example St
                  Name: ExampleCorp
                  OrganisationID: '5'
                  Website: www.example.com
              schema:
                properties:
                  Organisation:
                    items:
                      $ref: '#/components/schemas/Organisation'
                    type: array
                type: object
          description: A list of organisations.
        '401':
          description: Unauthorized.
      summary: Search for organisations
      tags:
      - Organisations
    post:
      description: Creates a new organisation.
      operationId: OrganisationCreate
      requestBody:
        content:
          application/json:
            example:
              Address: 456 New St
              Name: NewExampleCorp
              Website: www.newexample.com
            schema:
              $ref: '#/components/schemas/OrganisationCreate'
        description: The organisation object to be created.
        required: true
      responses:
        '201':
          description: The organisation was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new organisation
      tags:
      - Organisations
  /organisations/{OrganisationID}:
    delete:
      description: Deletes a specific organisation.
      operationId: OrganisationDelete
      parameters:
      - description: The unique identifier of the organisation to delete.
        in: path
        name: OrganisationID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The organisation was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete an organisation
      tags:
      - Organisations
    get:
      description: Retrieves the details of a specific organisation.
      operationId: OrganisationGet
      parameters:
      - description: The unique identifier of the organisation.
        in: path
        name: OrganisationID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Address: 123 Example St
                Name: ExampleCorp
                OrganisationID: '5'
                Website: www.example.com
              schema:
                $ref: '#/components/schemas/Organisation'
          description: Organisation details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific organisation
      tags:
      - Organisations
    patch:
      description: Updates an existing organisation.
      operationId: OrganisationUpdate
      parameters:
      - description: The unique identifier of the organisation to update.
        in: path
        name: OrganisationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Name: UpdatedExampleCorp
              Website: www.updatedexample.com
            schema:
              $ref: '#/components/schemas/OrganisationUpdate'
        description: The organisation attributes to update.
        required: true
      responses:
        '200':
          description: The organisation was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update an organisation
      tags:
      - Organisations
  /organisations/{OrganisationID}/contacts:
    get:
      description: Retrieves contacts associated with a specific organisation.
      operationId: OrganisationContactSearch
      parameters:
      - description: The unique identifier of the organisation.
        in: path
        name: OrganisationID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Contact:
                - ContactID: '4711'
                  Email: john.doe@example.com
                  FirstName: John
                  LastName: Doe
                  OrganisationID: '5'
                  Phone: +1 123-456-7890
                - ContactID: '4712'
                  Email: jane.doe@example.com
                  FirstName: Jane
                  LastName: Doe
                  OrganisationID: '5'
                  Phone: +1 123-456-7891
              schema:
                properties:
                  Contact:
                    items:
                      $ref: '#/components/schemas/Contact'
                    type: array
                type: object
          description: A list of contacts.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get contacts for an organisation
      tags:
      - Organisations
  /organisations/{OrganisationID}/tickets:
    get:
      description: Retrieves tickets associated with a specific organisation.
      operationId: OrganisationTicketSearch
      parameters:
      - description: The unique identifier of the organisation.
        in: path
        name: OrganisationID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Ticket:
                - Changed: '2014-07-01 12:00:00'
                  Created: '2014-07-01 12:00:00'
                  CustomerUser: test
                  Owner: root@localhost
                  Priority: 3 normal
                  Queue: Service
                  State: new
                  TicketID: '4711'
                  TicketNumber: '2014070110123456'
                  Title: REST-API Test
              schema:
                properties:
                  Ticket:
                    items:
                      $ref: '#/components/schemas/Ticket'
                    type: array
                type: object
          description: A list of tickets.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get tickets for an organisation
      tags:
      - Organisations
  /reporting/datasources:
    get:
      description: Retrieves a list of reporting data sources.
      operationId: ReportingDataSourceSearch
      responses:
        '200':
          description: A list of data sources.
        '401':
          description: Unauthorized.
      summary: Search for reporting data sources
      tags:
      - Reporting
  /reporting/datasources/{DataSource}:
    get:
      description: Retrieves the details of a specific reporting data source.
      operationId: ReportingDataSourceGet
      parameters:
      - description: The name of the data source.
        in: path
        name: DataSource
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Data source details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific reporting data source
      tags:
      - Reporting
  /reporting/outputformats:
    get:
      description: Retrieves a list of reporting output formats.
      operationId: ReportingOutputFormatSearch
      responses:
        '200':
          description: A list of output formats.
        '401':
          description: Unauthorized.
      summary: Search for reporting output formats
      tags:
      - Reporting
  /reporting/outputformats/{OutputFormat}:
    get:
      description: Retrieves the details of a specific reporting output format.
      operationId: ReportingOutputFormatGet
      parameters:
      - description: The name of the output format.
        in: path
        name: OutputFormat
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Output format details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific reporting output format
      tags:
      - Reporting
  /reporting/reportdefinitions:
    get:
      description: Retrieves a list of report definitions.
      operationId: ReportDefinitionSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ReportDefinition:
                    items:
                      $ref: '#/components/schemas/ReportDefinition'
                    type: array
                type: object
          description: A list of report definitions.
        '401':
          description: Unauthorized.
      summary: Search for report definitions
      tags:
      - Reporting
    post:
      description: Creates a new report definition.
      operationId: ReportDefinitionCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportDefinitionCreate'
        description: The report definition object to be created.
        required: true
      responses:
        '201':
          description: The report definition was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new report definition
      tags:
      - Reporting
  /reporting/reportdefinitions/{ReportDefinitionID}:
    delete:
      description: Deletes a specific report definition.
      operationId: ReportDefinitionDelete
      parameters:
      - description: The unique identifier of the report definition to delete.
        in: path
        name: ReportDefinitionID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The report definition was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a report definition
      tags:
      - Reporting
    get:
      description: Retrieves the details of a specific report definition.
      operationId: ReportDefinitionGet
      parameters:
      - description: The unique identifier of the report definition.
        in: path
        name: ReportDefinitionID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportDefinition'
          description: Report definition details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific report definition
      tags:
      - Reporting
    patch:
      description: Updates an existing report definition.
      operationId: ReportDefinitionUpdate
      parameters:
      - description: The unique identifier of the report definition to update.
        in: path
        name: ReportDefinitionID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportDefinitionUpdate'
        description: The report definition attributes to update.
        required: true
      responses:
        '200':
          description: The report definition was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a report definition
      tags:
      - Reporting
  /reporting/reports:
    get:
      description: Retrieves a list of reports.
      operationId: ReportSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Report:
                    items:
                      $ref: '#/components/schemas/Report'
                    type: array
                type: object
          description: A list of reports.
        '401':
          description: Unauthorized.
      summary: Search for reports
      tags:
      - Reporting
    post:
      description: Creates a new report.
      operationId: ReportCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportCreate'
        description: The report object to be created.
        required: true
      responses:
        '201':
          description: The report was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new report
      tags:
      - Reporting
  /reporting/reports/{ReportID}:
    delete:
      description: Deletes a specific report.
      operationId: ReportDelete
      parameters:
      - description: The unique identifier of the report to delete.
        in: path
        name: ReportID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The report was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a report
      tags:
      - Reporting
    get:
      description: Retrieves the details of a specific report.
      operationId: ReportGet
      parameters:
      - description: The unique identifier of the report.
        in: path
        name: ReportID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Report details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific report
      tags:
      - Reporting
  /reporting/reports/{ReportID}/results:
    get:
      description: Retrieves the results of a specific report.
      operationId: ReportResultSearch
      parameters:
      - description: The unique identifier of the report.
        in: path
        name: ReportID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Report results.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get report results
      tags:
      - Reporting
  /reporting/reports/{ReportID}/results/{ReportResultID}:
    get:
      description: Retrieves a specific result for a report.
      operationId: ReportResultGet
      parameters:
      - description: The ID of the report.
        in: path
        name: ReportID
        required: true
        schema:
          type: string
      - description: The ID of the result.
        in: path
        name: ReportResultID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Report result details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific report result
      tags:
      - Reporting
  /session:
    delete:
      description: Logs the current user out by invalidating their session token.
      operationId: SessionDelete
      responses:
        '204':
          description: Session deleted successfully.
        '401':
          description: Unauthorized.
      summary: Delete current session (Logout)
      tags:
      - Session
    get:
      description: Retrieves detailed information about the current user's session.
      operationId: SessionGet
      responses:
        '200':
          content:
            application/json:
              example:
                ChallengeToken: some_challenge_token
                SessionID: some_session_id
                UserFirstname: Test
                UserID: '1'
                UserLastname: User
                UserLogin: testuser
              schema:
                $ref: '#/components/schemas/SessionInfo'
          description: Session information retrieved successfully.
        '401':
          description: Unauthorized.
      summary: Get current session information
      tags:
      - Session
  /session/user:
    get:
      description: Retrieves the details of the currently authenticated user.
      operationId: SessionUserGet
      responses:
        '200':
          description: User details.
        '401':
          description: Unauthorized.
      summary: Get current session user
      tags:
      - Session
    patch:
      description: Updates the details of the currently authenticated user.
      operationId: SessionUserUpdate
      responses:
        '200':
          description: The user was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Update current session user
      tags:
      - Session
  /session/user/counters:
    get:
      description: Retrieves counters for the current user.
      operationId: SessionUserCountersGet
      responses:
        '200':
          description: A list of counters.
        '401':
          description: Unauthorized.
      summary: Get user counters
      tags:
      - Session
  /session/user/preferences:
    get:
      description: Retrieves the preferences for the current user.
      operationId: SessionUserPreferenceSearch
      responses:
        '200':
          description: A list of preferences.
        '401':
          description: Unauthorized.
      summary: Get user preferences
      tags:
      - Session
    post:
      description: Creates a new preference for the current user.
      operationId: SessionUserPreferenceCreate
      responses:
        '201':
          description: The preference was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a user preference
      tags:
      - Session
  /session/user/preferences/{UserPreferenceID}:
    get:
      description: Retrieves a specific preference for the current user.
      operationId: SessionUserPreferenceGet
      parameters:
      - description: The ID of the user preference.
        in: path
        name: UserPreferenceID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Preference details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific user preference
      tags:
      - Session
    patch:
      description: Updates a specific preference for the current user.
      operationId: SessionUserPreferenceUpdate
      parameters:
      - description: The ID of the user preference to update.
        in: path
        name: UserPreferenceID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The preference was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a user preference
      tags:
      - Session
  /session/user/roleids:
    get:
      description: Retrieves the role IDs for the current user.
      operationId: SessionUserRoleIDSearch
      responses:
        '200':
          description: A list of role IDs.
        '401':
          description: Unauthorized.
      summary: Get user role IDs
      tags:
      - Session
  /session/user/tickets:
    get:
      description: Retrieves the tickets for the current user.
      operationId: SessionUserTicketsGet
      responses:
        '200':
          description: A list of tickets.
        '401':
          description: Unauthorized.
      summary: Get user tickets
      tags:
      - Session
  /system/automation/execplans:
    get:
      description: Retrieves a list of execution plans.
      operationId: ExecPlanSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ExecPlan:
                    items:
                      $ref: '#/components/schemas/ExecPlan'
                    type: array
                type: object
          description: A list of execution plans.
        '401':
          description: Unauthorized.
      summary: Search for execution plans
      tags:
      - System - Automation
    post:
      description: Creates a new execution plan.
      operationId: ExecPlanCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecPlanCreate'
        description: The execution plan object to be created.
        required: true
      responses:
        '201':
          description: The execution plan was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new execution plan
      tags:
      - System - Automation
  /system/automation/execplans/types:
    get:
      description: Retrieves a list of execution plan types.
      operationId: ExecPlanTypeSearch
      responses:
        '200':
          description: A list of execution plan types.
        '401':
          description: Unauthorized.
      summary: Get execution plan types
      tags:
      - System - Automation
  /system/automation/execplans/types/{ExecPlanType}:
    get:
      description: Retrieves the details of a specific execution plan type.
      operationId: ExecPlanTypeGet
      parameters:
      - description: The name of the execution plan type.
        in: path
        name: ExecPlanType
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Execution plan type details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific execution plan type
      tags:
      - System - Automation
  /system/automation/execplans/{ExecPlanID}:
    delete:
      description: Deletes a specific execution plan.
      operationId: ExecPlanDelete
      parameters:
      - description: The unique identifier of the execution plan to delete.
        in: path
        name: ExecPlanID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The execution plan was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete an execution plan
      tags:
      - System - Automation
    get:
      description: Retrieves the details of a specific execution plan.
      operationId: ExecPlanGet
      parameters:
      - description: The unique identifier of the execution plan.
        in: path
        name: ExecPlanID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecPlan'
          description: Execution plan details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific execution plan
      tags:
      - System - Automation
    patch:
      description: Updates an existing execution plan.
      operationId: ExecPlanUpdate
      parameters:
      - description: The unique identifier of the execution plan to update.
        in: path
        name: ExecPlanID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecPlanUpdate'
        description: The execution plan attributes to update.
        required: true
      responses:
        '200':
          description: The execution plan was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update an execution plan
      tags:
      - System - Automation
  /system/automation/jobs:
    get:
      description: Retrieves a list of automation jobs.
      operationId: JobSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Job:
                    items:
                      $ref: '#/components/schemas/Job'
                    type: array
                type: object
          description: A list of automation jobs.
        '401':
          description: Unauthorized.
      summary: Search for automation jobs
      tags:
      - System - Automation
    post:
      description: Creates a new automation job.
      operationId: JobCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreate'
        description: The automation job object to be created.
        required: true
      responses:
        '201':
          description: The automation job was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new automation job
      tags:
      - System - Automation
  /system/automation/jobs/types:
    get:
      description: Retrieves a list of automation job types.
      operationId: JobTypeSearch
      responses:
        '200':
          description: A list of job types.
        '401':
          description: Unauthorized.
      summary: Get automation job types
      tags:
      - System - Automation
  /system/automation/jobs/{JobID}:
    delete:
      description: Deletes a specific automation job.
      operationId: JobDelete
      parameters:
      - description: The unique identifier of the automation job to delete.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The automation job was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete an automation job
      tags:
      - System - Automation
    get:
      description: Retrieves the details of a specific automation job.
      operationId: JobGet
      parameters:
      - description: The unique identifier of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
          description: Automation job details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific automation job
      tags:
      - System - Automation
    patch:
      description: Updates an existing automation job.
      operationId: JobUpdate
      parameters:
      - description: The unique identifier of the automation job to update.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobUpdate'
        description: The automation job attributes to update.
        required: true
      responses:
        '200':
          description: The automation job was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update an automation job
      tags:
      - System - Automation
  /system/automation/jobs/{JobID}/execplanids:
    get:
      description: Retrieves the execution plan IDs for a specific automation job.
      operationId: JobExecPlanIDSearch
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of execution plan IDs.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get execution plan IDs for a job
      tags:
      - System - Automation
    post:
      description: Adds an execution plan to a specific automation job.
      operationId: JobExecPlanIDCreate
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The execution plan was successfully added to the job.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Add an execution plan to a job
      tags:
      - System - Automation
  /system/automation/jobs/{JobID}/execplanids/{ExecPlanID}:
    delete:
      description: Removes an execution plan from a specific automation job.
      operationId: JobExecPlanIDDelete
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      - description: The ID of the execution plan to remove.
        in: path
        name: ExecPlanID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The execution plan was successfully removed from the job.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete an execution plan from a job
      tags:
      - System - Automation
  /system/automation/jobs/{JobID}/macroids:
    get:
      description: Retrieves the macro IDs for a specific automation job.
      operationId: JobMacroIDSearch
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of macro IDs.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get macro IDs for a job
      tags:
      - System - Automation
    post:
      description: Adds a macro to a specific automation job.
      operationId: JobMacroIDCreate
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The macro was successfully added to the job.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Add a macro to a job
      tags:
      - System - Automation
  /system/automation/jobs/{JobID}/macroids/{MacroID}:
    delete:
      description: Removes a macro from a specific automation job.
      operationId: JobMacroIDDelete
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      - description: The ID of the macro to remove.
        in: path
        name: MacroID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The macro was successfully removed from the job.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a macro from a job
      tags:
      - System - Automation
  /system/automation/jobs/{JobID}/runs:
    get:
      description: Retrieves the runs for a specific automation job.
      operationId: JobRunSearch
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of job runs.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get job runs
      tags:
      - System - Automation
  /system/automation/jobs/{JobID}/runs/{RunID}:
    get:
      description: Retrieves a specific run for an automation job.
      operationId: JobRunGet
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      - description: The ID of the job run.
        in: path
        name: RunID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Job run details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific job run
      tags:
      - System - Automation
  /system/automation/jobs/{JobID}/runs/{RunID}/logs:
    get:
      description: Retrieves the logs for a specific job run.
      operationId: JobRunLogSearch
      parameters:
      - description: The ID of the automation job.
        in: path
        name: JobID
        required: true
        schema:
          type: string
      - description: The ID of the job run.
        in: path
        name: RunID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of log entries.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get job run logs
      tags:
      - System - Automation
  /system/automation/macros:
    get:
      description: Retrieves a list of automation macros.
      operationId: MacroSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Macro:
                    items:
                      $ref: '#/components/schemas/Macro'
                    type: array
                type: object
          description: A list of automation macros.
        '401':
          description: Unauthorized.
      summary: Search for automation macros
      tags:
      - System - Automation
    post:
      description: Creates a new automation macro.
      operationId: MacroCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroCreate'
        description: The automation macro object to be created.
        required: true
      responses:
        '201':
          description: The automation macro was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new automation macro
      tags:
      - System - Automation
  /system/automation/macros/types:
    get:
      description: Retrieves a list of possible types for automation macros.
      operationId: MacroTypeSearch
      responses:
        '200':
          description: A list of macro types.
        '401':
          description: Unauthorized.
      summary: Get macro types
      tags:
      - System - Automation
  /system/automation/macros/types/{MacroType}/actiontypes:
    get:
      description: Retrieves a list of action types for a specific macro type.
      operationId: MacroActionTypeSearch
      parameters:
      - description: The name of the macro type.
        in: path
        name: MacroType
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of action types.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get macro action types
      tags:
      - System - Automation
  /system/automation/macros/types/{MacroType}/actiontypes/{MacroActionType}:
    get:
      description: Retrieves the details of a specific macro action type.
      operationId: MacroActionTypeGet
      parameters:
      - description: The name of the macro type.
        in: path
        name: MacroType
        required: true
        schema:
          type: string
      - description: The name of the macro action type.
        in: path
        name: MacroActionType
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Macro action type details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific macro action type
      tags:
      - System - Automation
  /system/automation/macros/{MacroID}:
    delete:
      description: Deletes a specific automation macro.
      operationId: MacroDelete
      parameters:
      - description: The unique identifier of the automation macro to delete.
        in: path
        name: MacroID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The automation macro was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete an automation macro
      tags:
      - System - Automation
    get:
      description: Retrieves the details of a specific automation macro.
      operationId: MacroGet
      parameters:
      - description: The unique identifier of the automation macro.
        in: path
        name: MacroID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Macro'
          description: Automation macro details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific automation macro
      tags:
      - System - Automation
    patch:
      description: Updates an existing automation macro.
      operationId: MacroUpdate
      parameters:
      - description: The unique identifier of the automation macro to update.
        in: path
        name: MacroID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MacroUpdate'
        description: The automation macro attributes to update.
        required: true
      responses:
        '200':
          description: The automation macro was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update an automation macro
      tags:
      - System - Automation
  /system/automation/macros/{MacroID}/actions:
    get:
      description: Retrieves the actions for a specific macro.
      operationId: MacroActionSearch
      parameters:
      - description: The ID of the macro.
        in: path
        name: MacroID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of macro actions.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get macro actions
      tags:
      - System - Automation
    post:
      description: Creates a new action for a specific macro.
      operationId: MacroActionCreate
      parameters:
      - description: The ID of the macro.
        in: path
        name: MacroID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The action was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Create a macro action
      tags:
      - System - Automation
  /system/automation/macros/{MacroID}/actions/{MacroActionID}:
    get:
      description: Retrieves a specific action for a macro.
      operationId: MacroActionGet
      parameters:
      - description: The ID of the macro.
        in: path
        name: MacroID
        required: true
        schema:
          type: string
      - description: The ID of the action.
        in: path
        name: MacroActionID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Macro action details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific macro action
      tags:
      - System - Automation
    patch:
      description: Updates a specific action for a macro.
      operationId: MacroActionUpdate
      parameters:
      - description: The ID of the macro.
        in: path
        name: MacroID
        required: true
        schema:
          type: string
      - description: The ID of the action to update.
        in: path
        name: MacroActionID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The action was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a macro action
      tags:
      - System - Automation
  /system/certificates:
    get:
      description: Retrieves a list of certificates.
      operationId: CertificateSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Certificate:
                    items:
                      $ref: '#/components/schemas/Certificate'
                    type: array
                type: object
          description: A list of certificates.
        '401':
          description: Unauthorized.
      summary: Search for certificates
      tags:
      - System - Security
    post:
      description: Creates a new certificate.
      operationId: CertificateCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateCreate'
        description: The certificate object to be created.
        required: true
      responses:
        '201':
          description: The certificate was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new certificate
      tags:
      - System - Security
  /system/certificates/{CertificateID}:
    delete:
      description: Deletes a specific certificate.
      operationId: CertificateDelete
      parameters:
      - description: The unique identifier of the certificate to delete.
        in: path
        name: CertificateID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The certificate was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a certificate
      tags:
      - System - Security
    get:
      description: Retrieves the details of a specific certificate.
      operationId: CertificateGet
      parameters:
      - description: The unique identifier of the certificate.
        in: path
        name: CertificateID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Certificate details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific certificate
      tags:
      - System - Security
  /system/cmdb/classes:
    get:
      description: Retrieves a list of CMDB classes.
      operationId: ClassSearch
      responses:
        '200':
          description: A list of CMDB classes.
        '401':
          description: Unauthorized.
      summary: Search for CMDB classes
      tags:
      - System - CMDB
    post:
      description: Creates a new CMDB class.
      operationId: ClassCreate
      responses:
        '201':
          description: The CMDB class was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new CMDB class
      tags:
      - System - CMDB
  /system/cmdb/classes/{ClassID}:
    get:
      description: Retrieves the details of a specific CMDB class.
      operationId: ClassGet
      parameters:
      - description: The ID of the CMDB class.
        in: path
        name: ClassID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: CMDB class details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific CMDB class
      tags:
      - System - CMDB
    patch:
      description: Updates an existing CMDB class.
      operationId: ClassUpdate
      parameters:
      - description: The ID of the CMDB class to update.
        in: path
        name: ClassID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The CMDB class was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a CMDB class
      tags:
      - System - CMDB
  /system/cmdb/classes/{ClassID}/definitions:
    get:
      description: Retrieves the definitions for a specific CMDB class.
      operationId: ClassDefinitionSearch
      parameters:
      - description: The ID of the CMDB class.
        in: path
        name: ClassID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of CMDB class definitions.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get CMDB class definitions
      tags:
      - System - CMDB
    post:
      description: Creates a new definition for a specific CMDB class.
      operationId: ClassDefinitionCreate
      parameters:
      - description: The ID of the CMDB class.
        in: path
        name: ClassID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The CMDB class definition was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Create a new CMDB class definition
      tags:
      - System - CMDB
  /system/cmdb/classes/{ClassID}/definitions/{DefinitionID}:
    get:
      description: Retrieves a specific definition for a CMDB class.
      operationId: ClassDefinitionGet
      parameters:
      - description: The ID of the CMDB class.
        in: path
        name: ClassID
        required: true
        schema:
          type: string
      - description: The ID of the definition.
        in: path
        name: DefinitionID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: CMDB class definition details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific CMDB class definition
      tags:
      - System - CMDB
  /system/communication/channels:
    get:
      description: Retrieves a list of communication channels.
      operationId: ChannelSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Channel:
                    items:
                      $ref: '#/components/schemas/Channel'
                    type: array
                type: object
          description: A list of channels.
        '401':
          description: Unauthorized.
      summary: Search for communication channels
      tags:
      - System - Communication
  /system/communication/channels/{ChannelID}:
    get:
      description: Retrieves the details of a specific communication channel.
      operationId: ChannelGet
      parameters:
      - description: The unique identifier of the channel.
        in: path
        name: ChannelID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
          description: Channel details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific communication channel
      tags:
      - System - Communication
  /system/communication/mailaccounts:
    get:
      description: Retrieves a list of mail accounts.
      operationId: MailAccountSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  MailAccount:
                    items:
                      $ref: '#/components/schemas/MailAccount'
                    type: array
                type: object
          description: A list of mail accounts.
        '401':
          description: Unauthorized.
      summary: Search for mail accounts
      tags:
      - System - Communication
    post:
      description: Creates a new mail account.
      operationId: MailAccountCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailAccountCreate'
        description: The mail account object to be created.
        required: true
      responses:
        '201':
          description: The mail account was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new mail account
      tags:
      - System - Communication
  /system/communication/mailaccounts/types:
    get:
      description: Retrieves a list of mail account types.
      operationId: MailAccountTypeSearch
      responses:
        '200':
          description: A list of mail account types.
        '401':
          description: Unauthorized.
      summary: Get mail account types
      tags:
      - System - Communication
  /system/communication/mailaccounts/{MailAccountID}:
    delete:
      description: Deletes a specific mail account.
      operationId: MailAccountDelete
      parameters:
      - description: The unique identifier of the mail account to delete.
        in: path
        name: MailAccountID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The mail account was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a mail account
      tags:
      - System - Communication
    get:
      description: Retrieves the details of a specific mail account.
      operationId: MailAccountGet
      parameters:
      - description: The unique identifier of the mail account.
        in: path
        name: MailAccountID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailAccount'
          description: Mail account details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific mail account
      tags:
      - System - Communication
    patch:
      description: Updates an existing mail account.
      operationId: MailAccountUpdate
      parameters:
      - description: The unique identifier of the mail account to update.
        in: path
        name: MailAccountID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailAccountUpdate'
        description: The mail account attributes to update.
        required: true
      responses:
        '200':
          description: The mail account was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a mail account
      tags:
      - System - Communication
  /system/communication/mailfilters:
    get:
      description: Retrieves a list of mail filters.
      operationId: MailFilterSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  MailFilter:
                    items:
                      $ref: '#/components/schemas/MailFilter'
                    type: array
                type: object
          description: A list of mail filters.
        '401':
          description: Unauthorized.
      summary: Search for mail filters
      tags:
      - System - Communication
    post:
      description: Creates a new mail filter.
      operationId: MailFilterCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailFilterCreate'
        description: The mail filter object to be created.
        required: true
      responses:
        '201':
          description: The mail filter was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new mail filter
      tags:
      - System - Communication
  /system/communication/mailfilters/{MailFilterID}:
    delete:
      description: Deletes a specific mail filter.
      operationId: MailFilterDelete
      parameters:
      - description: The unique identifier of the mail filter to delete.
        in: path
        name: MailFilterID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The mail filter was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a mail filter
      tags:
      - System - Communication
    get:
      description: Retrieves the details of a specific mail filter.
      operationId: MailFilterGet
      parameters:
      - description: The unique identifier of the mail filter.
        in: path
        name: MailFilterID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MailFilter'
          description: Mail filter details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific mail filter
      tags:
      - System - Communication
    patch:
      description: Updates an existing mail filter.
      operationId: MailFilterUpdate
      parameters:
      - description: The unique identifier of the mail filter to update.
        in: path
        name: MailFilterID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MailFilterUpdate'
        description: The mail filter attributes to update.
        required: true
      responses:
        '200':
          description: The mail filter was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a mail filter
      tags:
      - System - Communication
  /system/communication/notifications:
    get:
      description: Retrieves a list of notifications.
      operationId: NotificationSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Notification:
                    items:
                      $ref: '#/components/schemas/Notification'
                    type: array
                type: object
          description: A list of notifications.
        '401':
          description: Unauthorized.
      summary: Search for notifications
      tags:
      - System - Communication
    post:
      description: Creates a new notification.
      operationId: NotificationCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreate'
        description: The notification object to be created.
        required: true
      responses:
        '201':
          description: The notification was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new notification
      tags:
      - System - Communication
  /system/communication/notifications/{NotificationID}:
    delete:
      description: Deletes a specific notification.
      operationId: NotificationDelete
      parameters:
      - description: The unique identifier of the notification to delete.
        in: path
        name: NotificationID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The notification was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a notification
      tags:
      - System - Communication
    get:
      description: Retrieves the details of a specific notification.
      operationId: NotificationGet
      parameters:
      - description: The unique identifier of the notification.
        in: path
        name: NotificationID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: Notification details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific notification
      tags:
      - System - Communication
    patch:
      description: Updates an existing notification.
      operationId: NotificationUpdate
      parameters:
      - description: The unique identifier of the notification to update.
        in: path
        name: NotificationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUpdate'
        description: The notification attributes to update.
        required: true
      responses:
        '200':
          description: The notification was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a notification
      tags:
      - System - Communication
  /system/communication/sendertypes:
    get:
      description: Retrieves a list of sender types.
      operationId: SenderTypeSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  SenderType:
                    items:
                      $ref: '#/components/schemas/SenderType'
                    type: array
                type: object
          description: A list of sender types.
        '401':
          description: Unauthorized.
      summary: Search for sender types
      tags:
      - System - Communication
  /system/communication/sendertypes/{SenderTypeID}:
    get:
      description: Retrieves the details of a specific sender type.
      operationId: SenderTypeGet
      parameters:
      - description: The unique identifier of the sender type.
        in: path
        name: SenderTypeID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SenderType'
          description: Sender type details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific sender type
      tags:
      - System - Communication
  /system/communication/systemaddresses:
    get:
      description: Retrieves a list of system addresses.
      operationId: SystemAddressSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  SystemAddress:
                    items:
                      $ref: '#/components/schemas/SystemAddress'
                    type: array
                type: object
          description: A list of system addresses.
        '401':
          description: Unauthorized.
      summary: Search for system addresses
      tags:
      - System - Communication
    post:
      description: Creates a new system address.
      operationId: SystemAddressCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAddressCreate'
        description: The system address object to be created.
        required: true
      responses:
        '201':
          description: The system address was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new system address
      tags:
      - System - Communication
  /system/communication/systemaddresses/{SystemAddressID}:
    delete:
      description: Deletes a specific system address.
      operationId: SystemAddressDelete
      parameters:
      - description: The unique identifier of the system address to delete.
        in: path
        name: SystemAddressID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The system address was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a system address
      tags:
      - System - Communication
    get:
      description: Retrieves the details of a specific system address.
      operationId: SystemAddressGet
      parameters:
      - description: The unique identifier of the system address.
        in: path
        name: SystemAddressID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemAddress'
          description: System address details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific system address
      tags:
      - System - Communication
    patch:
      description: Updates an existing system address.
      operationId: SystemAddressUpdate
      parameters:
      - description: The unique identifier of the system address to update.
        in: path
        name: SystemAddressID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemAddressUpdate'
        description: The system address attributes to update.
        required: true
      responses:
        '200':
          description: The system address was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a system address
      tags:
      - System - Communication
  /system/config:
    get:
      description: Retrieves a list of system configuration options.
      operationId: SysConfigOptionSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ConfigOption:
                    items:
                      $ref: '#/components/schemas/ConfigOption'
                    type: array
                type: object
          description: A list of configuration options.
        '401':
          description: Unauthorized.
      summary: Search for system configuration options
      tags:
      - System - Configuration
  /system/config/definitions:
    get:
      description: Retrieves a list of system configuration option definitions.
      operationId: SysConfigOptionDefinitionSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ConfigOptionDefinition:
                    items:
                      $ref: '#/components/schemas/ConfigOptionDefinition'
                    type: array
                type: object
          description: A list of configuration option definitions.
        '401':
          description: Unauthorized.
      summary: Search for system configuration option definitions
      tags:
      - System - Configuration
  /system/config/definitions/{Option}:
    get:
      description: Retrieves a specific system configuration option definition.
      operationId: SysConfigOptionDefinitionGet
      parameters:
      - description: The name of the configuration option definition.
        in: path
        name: Option
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Configuration option definition details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a system configuration option definition
      tags:
      - System - Configuration
    patch:
      description: Updates a specific system configuration option definition.
      operationId: SysConfigOptionDefinitionUpdate
      parameters:
      - description: The name of the configuration option definition to update.
        in: path
        name: Option
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The configuration option definition was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a system configuration option definition
      tags:
      - System - Configuration
  /system/config/{Option}:
    get:
      description: Retrieves the value of a specific system configuration option.
      operationId: SysConfigOptionGet
      parameters:
      - description: The name of the configuration option.
        in: path
        name: Option
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigOption'
          description: Configuration option value.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific system configuration option
      tags:
      - System - Configuration
    patch:
      description: Updates the value of a specific system configuration option.
      operationId: SysConfigOptionUpdate
      parameters:
      - description: The name of the configuration option to update.
        in: path
        name: Option
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                Value:
                  description: The new value for the option. Can be any valid JSON
                    type.
                  type: object
              type: object
        description: The new value for the configuration option.
        required: true
      responses:
        '200':
          description: The configuration option was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a system configuration option
      tags:
      - System - Configuration
  /system/console:
    get:
      description: Retrieves a list of available console commands.
      operationId: ConsoleCommandSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Command:
                    items:
                      $ref: '#/components/schemas/Command'
                    type: array
                type: object
          description: A list of console commands.
        '401':
          description: Unauthorized.
      summary: Search for console commands
      tags:
      - System - Console
    post:
      description: Executes a console command.
      operationId: ConsoleCommandExecute
      requestBody:
        content:
          application/json:
            schema:
              properties:
                Command:
                  description: The full command string to execute.
                  type: string
              required:
              - Command
              type: object
        description: The command to be executed.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Result:
                    type: string
                type: object
          description: The command was successfully executed.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Execute a console command
      tags:
      - System - Console
  /system/console/files:
    get:
      description: Retrieves a list of console files.
      operationId: ConsoleFileSearch
      responses:
        '200':
          description: A list of console files.
        '401':
          description: Unauthorized.
      summary: Search for console files
      tags:
      - System - Console
    post:
      description: Creates a new console file.
      operationId: ConsoleFileCreate
      responses:
        '201':
          description: The file was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new console file
      tags:
      - System - Console
  /system/console/files/{FileID}:
    delete:
      description: Deletes a specific console file.
      operationId: ConsoleFileDelete
      parameters:
      - description: The ID of the file to delete.
        in: path
        name: FileID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The file was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a console file
      tags:
      - System - Console
  /system/console/{Command}:
    get:
      description: Retrieves the details of a specific console command.
      operationId: ConsoleCommandGet
      parameters:
      - description: The name of the command.
        in: path
        name: Command
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
          description: Command details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific console command
      tags:
      - System - Console
  /system/dynamicfields:
    get:
      description: Retrieves a list of dynamic fields.
      operationId: DynamicFieldSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  DynamicField:
                    items:
                      $ref: '#/components/schemas/DynamicField'
                    type: array
                type: object
          description: A list of dynamic fields.
        '401':
          description: Unauthorized.
      summary: Search for dynamic fields
      tags:
      - System - Dynamic Fields
    post:
      description: Creates a new dynamic field.
      operationId: DynamicFieldCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicFieldCreate'
        description: The dynamic field object to be created.
        required: true
      responses:
        '201':
          description: The dynamic field was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new dynamic field
      tags:
      - System - Dynamic Fields
  /system/dynamicfields/objecttypes:
    get:
      description: Retrieves a list of possible object types for dynamic fields.
      operationId: DynamicFieldObjectTypeSearch
      responses:
        '200':
          description: A list of object types.
        '401':
          description: Unauthorized.
      summary: Get dynamic field object types
      tags:
      - System - Dynamic Fields
  /system/dynamicfields/types:
    get:
      description: Retrieves a list of possible data types for dynamic fields.
      operationId: DynamicFieldTypeSearch
      responses:
        '200':
          description: A list of data types.
        '401':
          description: Unauthorized.
      summary: Get dynamic field types
      tags:
      - System - Dynamic Fields
  /system/dynamicfields/{DynamicFieldID}:
    delete:
      description: Deletes a specific dynamic field.
      operationId: DynamicFieldDelete
      parameters:
      - description: The unique identifier of the dynamic field to delete.
        in: path
        name: DynamicFieldID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The dynamic field was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a dynamic field
      tags:
      - System - Dynamic Fields
    get:
      description: Retrieves the details of a specific dynamic field.
      operationId: DynamicFieldGet
      parameters:
      - description: The unique identifier of the dynamic field.
        in: path
        name: DynamicFieldID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicField'
          description: Dynamic field details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific dynamic field
      tags:
      - System - Dynamic Fields
    patch:
      description: Updates an existing dynamic field.
      operationId: DynamicFieldUpdate
      parameters:
      - description: The unique identifier of the dynamic field to update.
        in: path
        name: DynamicFieldID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicFieldUpdate'
        description: The dynamic field attributes to update.
        required: true
      responses:
        '200':
          description: The dynamic field was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a dynamic field
      tags:
      - System - Dynamic Fields
  /system/dynamicfields/{DynamicFieldID}/config:
    get:
      description: Retrieves the configuration for a specific dynamic field.
      operationId: DynamicFieldConfigGet
      parameters:
      - description: The ID of the dynamic field.
        in: path
        name: DynamicFieldID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Dynamic field configuration details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get dynamic field configuration
      tags:
      - System - Dynamic Fields
    patch:
      description: Updates the configuration for a specific dynamic field.
      operationId: DynamicFieldConfigUpdate
      parameters:
      - description: The ID of the dynamic field to update.
        in: path
        name: DynamicFieldID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The dynamic field configuration was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update dynamic field configuration
      tags:
      - System - Dynamic Fields
  /system/faq/categories:
    get:
      description: Retrieves a list of FAQ categories.
      operationId: FAQCategorySearch
      responses:
        '200':
          description: A list of FAQ categories.
        '401':
          description: Unauthorized.
      summary: Search for FAQ categories
      tags:
      - System - FAQ
    post:
      description: Creates a new FAQ category.
      operationId: FAQCategoryCreate
      responses:
        '201':
          description: The FAQ category was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new FAQ category
      tags:
      - System - FAQ
  /system/faq/categories/{FAQCategoryID}:
    get:
      description: Retrieves the details of a specific FAQ category.
      operationId: FAQCategoryGet
      parameters:
      - description: The ID of the FAQ category.
        in: path
        name: FAQCategoryID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: FAQ category details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific FAQ category
      tags:
      - System - FAQ
    patch:
      description: Updates an existing FAQ category.
      operationId: FAQCategoryUpdate
      parameters:
      - description: The ID of the FAQ category to update.
        in: path
        name: FAQCategoryID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The FAQ category was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update an FAQ category
      tags:
      - System - FAQ
  /system/generalcatalog:
    get:
      description: Retrieves a list of general catalog items.
      operationId: GeneralCatalogItemSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  GeneralCatalogItem:
                    items:
                      $ref: '#/components/schemas/GeneralCatalogItem'
                    type: array
                type: object
          description: A list of general catalog items.
        '401':
          description: Unauthorized.
      summary: Search for general catalog items
      tags:
      - System - General Catalog
    post:
      description: Creates a new general catalog item.
      operationId: GeneralCatalogItemCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralCatalogItemCreate'
        description: The general catalog item object to be created.
        required: true
      responses:
        '201':
          description: The general catalog item was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new general catalog item
      tags:
      - System - General Catalog
  /system/generalcatalog/classes:
    get:
      description: Retrieves a list of all general catalog classes.
      operationId: GeneralCatalogClassSearch
      responses:
        '200':
          description: A list of general catalog classes.
        '401':
          description: Unauthorized.
      summary: Get general catalog classes
      tags:
      - System - General Catalog
  /system/generalcatalog/{GeneralCatalogItemID}:
    delete:
      description: Deletes a specific general catalog item.
      operationId: GeneralCatalogItemDelete
      parameters:
      - description: The unique identifier of the general catalog item to delete.
        in: path
        name: GeneralCatalogItemID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The general catalog item was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a general catalog item
      tags:
      - System - General Catalog
    get:
      description: Retrieves the details of a specific general catalog item.
      operationId: GeneralCatalogItemGet
      parameters:
      - description: The unique identifier of the general catalog item.
        in: path
        name: GeneralCatalogItemID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralCatalogItem'
          description: General catalog item details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific general catalog item
      tags:
      - System - General Catalog
    patch:
      description: Updates an existing general catalog item.
      operationId: GeneralCatalogItemUpdate
      parameters:
      - description: The unique identifier of the general catalog item to update.
        in: path
        name: GeneralCatalogItemID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralCatalogItemUpdate'
        description: The general catalog item attributes to update.
        required: true
      responses:
        '200':
          description: The general catalog item was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a general catalog item
      tags:
      - System - General Catalog
  /system/htmltopdf/convert:
    get:
      description: Converts an HTML template to a PDF document.
      operationId: HTMLToPDFTemplateConvert
      responses:
        '200':
          description: The PDF document was successfully generated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Convert HTML to PDF
      tags:
      - System - Utilities
  /system/i18n/translations:
    get:
      description: Retrieves a list of translation patterns.
      operationId: TranslationPatternSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  TranslationPattern:
                    items:
                      $ref: '#/components/schemas/TranslationPattern'
                    type: array
                type: object
          description: A list of translation patterns.
        '401':
          description: Unauthorized.
      summary: Search for translation patterns
      tags:
      - System - i18n
    post:
      description: Creates a new translation pattern.
      operationId: TranslationPatternCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslationPatternCreate'
        description: The translation pattern object to be created.
        required: true
      responses:
        '201':
          description: The translation pattern was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new translation pattern
      tags:
      - System - i18n
  /system/i18n/translations/{PatternID}:
    delete:
      description: Deletes a specific translation pattern.
      operationId: TranslationPatternDelete
      parameters:
      - description: The unique identifier of the translation pattern to delete.
        in: path
        name: PatternID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The translation pattern was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a translation pattern
      tags:
      - System - i18n
    get:
      description: Retrieves the details of a specific translation pattern.
      operationId: TranslationPatternGet
      parameters:
      - description: The unique identifier of the translation pattern.
        in: path
        name: PatternID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationPattern'
          description: Translation pattern details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific translation pattern
      tags:
      - System - i18n
    patch:
      description: Updates an existing translation pattern.
      operationId: TranslationPatternUpdate
      parameters:
      - description: The unique identifier of the translation pattern to update.
        in: path
        name: PatternID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslationPatternUpdate'
        description: The translation pattern attributes to update.
        required: true
      responses:
        '200':
          description: The translation pattern was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a translation pattern
      tags:
      - System - i18n
  /system/i18n/translations/{PatternID}/languages:
    post:
      description: Creates a new translation for a given language and pattern.
      operationId: TranslationLanguageCreate
      parameters:
      - description: The ID of the translation pattern.
        in: path
        name: PatternID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The translation was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Create a translation for a language
      tags:
      - System - i18n
  /system/i18n/translations/{PatternID}/languages/{Language}:
    get:
      description: Retrieves a specific translation for a given language and pattern.
      operationId: TranslationLanguageGet
      parameters:
      - description: The ID of the translation pattern.
        in: path
        name: PatternID
        required: true
        schema:
          type: string
      - description: The language code (e.g., 'en', 'de').
        in: path
        name: Language
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Translation details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific translation for a language
      tags:
      - System - i18n
    patch:
      description: Updates a specific translation for a given language and pattern.
      operationId: TranslationLanguageUpdate
      parameters:
      - description: The ID of the translation pattern.
        in: path
        name: PatternID
        required: true
        schema:
          type: string
      - description: The language code to update.
        in: path
        name: Language
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The translation was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a translation for a language
      tags:
      - System - i18n
  /system/importexport/templates:
    get:
      description: Retrieves a list of import/export templates.
      operationId: ImportExportTemplateSearch
      responses:
        '200':
          description: A list of templates.
        '401':
          description: Unauthorized.
      summary: Search for import/export templates
      tags:
      - System - Import/Export
  /system/importexport/templates/{TemplateID}:
    get:
      description: Retrieves the details of a specific import/export template.
      operationId: ImportExportTemplateGet
      parameters:
      - description: The ID of the template.
        in: path
        name: TemplateID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Template details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific import/export template
      tags:
      - System - Import/Export
  /system/importexport/templates/{TemplateID}/runs:
    get:
      description: Retrieves the runs for a specific import/export template.
      operationId: ImportExportTemplateRunSearch
      parameters:
      - description: The ID of the template.
        in: path
        name: TemplateID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of template runs.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get import/export template runs
      tags:
      - System - Import/Export
    post:
      description: Creates a new run for a specific import/export template.
      operationId: ImportExportTemplateRunCreate
      parameters:
      - description: The ID of the template.
        in: path
        name: TemplateID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The template run was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Create a new import/export template run
      tags:
      - System - Import/Export
  /system/logs:
    get:
      description: Retrieves a list of log files.
      operationId: LogFileSearch
      responses:
        '200':
          description: A list of log files.
        '401':
          description: Unauthorized.
      summary: Search for log files
      tags:
      - System - Logs
  /system/logs/{LogFileID}:
    get:
      description: Retrieves the contents of a specific log file.
      operationId: LogFileGet
      parameters:
      - description: The ID of the log file.
        in: path
        name: LogFileID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Log file content.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific log file
      tags:
      - System - Logs
  /system/migration:
    get:
      description: Retrieves a list of migrations.
      operationId: MigrationSearch
      responses:
        '200':
          description: A list of migrations.
        '401':
          description: Unauthorized.
      summary: Search for migrations
      tags:
      - System - Migration
    post:
      description: Creates a new migration.
      operationId: MigrationCreate
      responses:
        '201':
          description: The migration was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new migration
      tags:
      - System - Migration
  /system/migration/{MigrationID}:
    get:
      description: Retrieves the details of a specific migration.
      operationId: MigrationGet
      parameters:
      - description: The ID of the migration.
        in: path
        name: MigrationID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Migration details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific migration
      tags:
      - System - Migration
  /system/oauth2/authcode:
    post:
      description: Processes the OAuth2 authorization code to obtain an access token.
      operationId: AuthCodeProcess
      responses:
        '200':
          description: The authorization code was successfully processed.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Process OAuth2 authorization code
      tags:
      - System - OAuth2
  /system/oauth2/profiles:
    get:
      description: Retrieves a list of OAuth2 profiles.
      operationId: ProfileSearch
      responses:
        '200':
          description: A list of OAuth2 profiles.
        '401':
          description: Unauthorized.
      summary: Search for OAuth2 profiles
      tags:
      - System - OAuth2
    post:
      description: Creates a new OAuth2 profile.
      operationId: ProfileCreate
      responses:
        '201':
          description: The OAuth2 profile was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new OAuth2 profile
      tags:
      - System - OAuth2
  /system/oauth2/profiles/{ProfileID}:
    get:
      description: Retrieves the details of a specific OAuth2 profile.
      operationId: ProfileGet
      parameters:
      - description: The ID of the OAuth2 profile.
        in: path
        name: ProfileID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OAuth2 profile details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific OAuth2 profile
      tags:
      - System - OAuth2
    patch:
      description: Updates an existing OAuth2 profile.
      operationId: ProfileUpdate
      parameters:
      - description: The ID of the OAuth2 profile to update.
        in: path
        name: ProfileID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The OAuth2 profile was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update an OAuth2 profile
      tags:
      - System - OAuth2
  /system/oauth2/profiles/{ProfileID}/authurl:
    get:
      description: Retrieves the authorization URL for a specific OAuth2 profile.
      operationId: ProfileGetAuthURL
      parameters:
      - description: The ID of the OAuth2 profile.
        in: path
        name: ProfileID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The authorization URL.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get OAuth2 authorization URL
      tags:
      - System - OAuth2
  /system/objecticons:
    get:
      description: Retrieves a list of object icons.
      operationId: ObjectIconSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ObjectIcon:
                    items:
                      $ref: '#/components/schemas/ObjectIcon'
                    type: array
                type: object
          description: A list of object icons.
        '401':
          description: Unauthorized.
      summary: Search for object icons
      tags:
      - System - UI
    post:
      description: Creates a new object icon.
      operationId: ObjectIconCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectIconCreate'
        description: The object icon object to be created.
        required: true
      responses:
        '201':
          description: The object icon was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new object icon
      tags:
      - System - UI
  /system/objecticons/{ObjectIconID}:
    delete:
      description: Deletes a specific object icon.
      operationId: ObjectIconDelete
      parameters:
      - description: The unique identifier of the object icon to delete.
        in: path
        name: ObjectIconID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The object icon was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete an object icon
      tags:
      - System - UI
    get:
      description: Retrieves the details of a specific object icon.
      operationId: ObjectIconGet
      parameters:
      - description: The unique identifier of the object icon.
        in: path
        name: ObjectIconID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIcon'
          description: Object icon details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific object icon
      tags:
      - System - UI
    patch:
      description: Updates an existing object icon.
      operationId: ObjectIconUpdate
      parameters:
      - description: The unique identifier of the object icon to update.
        in: path
        name: ObjectIconID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectIconUpdate'
        description: The object icon attributes to update.
        required: true
      responses:
        '200':
          description: The object icon was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update an object icon
      tags:
      - System - UI
  /system/plugins:
    get:
      description: Retrieves a list of installed plugins.
      operationId: PluginSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Plugin:
                    items:
                      $ref: '#/components/schemas/Plugin'
                    type: array
                type: object
          description: A list of plugins.
        '401':
          description: Unauthorized.
      summary: Search for plugins
      tags:
      - System - Plugins
  /system/plugins/{Product}:
    get:
      description: Retrieves the details of a specific plugin by its product name.
      operationId: PluginGet
      parameters:
      - description: The product name of the plugin.
        in: path
        name: Product
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plugin'
          description: Plugin details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific plugin
      tags:
      - System - Plugins
    patch:
      description: Updates an existing plugin.
      operationId: PluginUpdate
      parameters:
      - description: The product name of the plugin to update.
        in: path
        name: Product
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PluginUpdate'
        description: The plugin attributes to update.
        required: true
      responses:
        '200':
          description: The plugin was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a plugin
      tags:
      - System - Plugins
  /system/roles:
    get:
      description: Retrieves a list of roles.
      operationId: RoleSearch
      responses:
        '200':
          content:
            application/json:
              example:
                Role:
                - Name: Admin
                  RoleID: '1'
                - Name: Agent
                  RoleID: '2'
              schema:
                properties:
                  Role:
                    items:
                      $ref: '#/components/schemas/Role'
                    type: array
                type: object
          description: A list of roles.
        '401':
          description: Unauthorized.
      summary: Search for roles
      tags:
      - System - Roles & Permissions
    post:
      description: Creates a new role.
      operationId: RoleCreate
      requestBody:
        content:
          application/json:
            example:
              Name: Customer
            schema:
              $ref: '#/components/schemas/RoleCreate'
        description: The role object to be created.
        required: true
      responses:
        '201':
          description: The role was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new role
      tags:
      - System - Roles & Permissions
  /system/roles/permissiontypes:
    get:
      description: Retrieves a list of permission types.
      operationId: PermissionTypeSearch
      responses:
        '200':
          description: A list of permission types.
        '401':
          description: Unauthorized.
      summary: Get permission types
      tags:
      - System - Roles & Permissions
  /system/roles/{RoleID}:
    delete:
      description: Deletes a specific role.
      operationId: RoleDelete
      parameters:
      - description: The unique identifier of the role to delete.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The role was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a role
      tags:
      - System - Roles & Permissions
    get:
      description: Retrieves the details of a specific role.
      operationId: RoleGet
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Name: Admin
                RoleID: '1'
              schema:
                $ref: '#/components/schemas/Role'
          description: Role details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific role
      tags:
      - System - Roles & Permissions
    patch:
      description: Updates an existing role.
      operationId: RoleUpdate
      parameters:
      - description: The unique identifier of the role to update.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Name: Administrator
            schema:
              $ref: '#/components/schemas/RoleUpdate'
        description: The role attributes to update.
        required: true
      responses:
        '200':
          description: The role was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a role
      tags:
      - System - Roles & Permissions
  /system/roles/{RoleID}/permissions:
    get:
      description: Retrieves a list of permissions for a specific role.
      operationId: PermissionSearch
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Permission:
                - PermissionID: '1'
                  PermissionKey: rw
                  PermissionValue: ticket
              schema:
                properties:
                  Permission:
                    items:
                      $ref: '#/components/schemas/Permission'
                    type: array
                type: object
          description: A list of permissions.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Search for permissions in a role
      tags:
      - System - Roles & Permissions
    post:
      description: Adds a new permission to a specific role.
      operationId: PermissionCreate
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              PermissionKey: ro
              PermissionValue: faq
            schema:
              $ref: '#/components/schemas/PermissionCreate'
        description: The permission object to be added.
        required: true
      responses:
        '201':
          description: The permission was successfully added.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Add a permission to a role
      tags:
      - System - Roles & Permissions
  /system/roles/{RoleID}/permissions/{PermissionID}:
    delete:
      description: Deletes a specific permission from a role.
      operationId: PermissionDelete
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      - description: The unique identifier of the permission to delete.
        in: path
        name: PermissionID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The permission was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a permission
      tags:
      - System - Roles & Permissions
    get:
      description: Retrieves the details of a specific permission within a role.
      operationId: PermissionGet
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      - description: The unique identifier of the permission.
        in: path
        name: PermissionID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                PermissionID: '1'
                PermissionKey: rw
                PermissionValue: ticket
              schema:
                $ref: '#/components/schemas/Permission'
          description: Permission details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific permission
      tags:
      - System - Roles & Permissions
    patch:
      description: Updates an existing permission within a role.
      operationId: PermissionUpdate
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      - description: The unique identifier of the permission to update.
        in: path
        name: PermissionID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              PermissionValue: ticket.note
            schema:
              $ref: '#/components/schemas/PermissionUpdate'
        description: The permission attributes to update.
        required: true
      responses:
        '200':
          description: The permission was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a permission
      tags:
      - System - Roles & Permissions
  /system/roles/{RoleID}/userids:
    get:
      description: Retrieves a list of user IDs associated with a specific role.
      operationId: RoleUserIDSearch
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                UserID:
                - '1'
                - '2'
              schema:
                properties:
                  UserID:
                    items:
                      type: string
                    type: array
                type: object
          description: A list of user IDs.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get user IDs for a role
      tags:
      - System - Roles & Permissions
    post:
      description: Adds a user to a specific role by their user ID.
      operationId: RoleUserIDCreate
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              UserID: '3'
            schema:
              properties:
                UserID:
                  description: The unique identifier of the user to add.
                  type: string
              required:
              - UserID
              type: object
        description: The user ID to be added to the role.
        required: true
      responses:
        '201':
          description: The user was successfully added to the role.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Add a user to a role
      tags:
      - System - Roles & Permissions
  /system/roles/{RoleID}/userids/{UserID}:
    delete:
      description: Removes a specific user from a role.
      operationId: RoleUserIDDelete
      parameters:
      - description: The unique identifier of the role.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      - description: The unique identifier of the user to remove.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The user was successfully removed from the role.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Remove a user from a role
      tags:
      - System - Roles & Permissions
  /system/sessions/{Token}:
    get:
      description: Retrieves the details of a specific session by its token.
      operationId: SessionGetByToken
      parameters:
      - description: The token of the session.
        in: path
        name: Token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Session details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific session
      tags:
      - System - Sessions
  /system/textmodules:
    get:
      description: Retrieves a list of text modules.
      operationId: TextModuleSearch
      responses:
        '200':
          content:
            application/json:
              example:
                TextModule:
                - CategoryID: '3'
                  Content: Hello, welcome to our service!
                  Name: Welcome Email
                  TextModuleID: '1'
              schema:
                properties:
                  TextModule:
                    items:
                      $ref: '#/components/schemas/TextModule'
                    type: array
                type: object
          description: A list of text modules.
        '401':
          description: Unauthorized.
      summary: Search for text modules
      tags:
      - System - Text Modules
    post:
      description: Creates a new text module.
      operationId: TextModuleCreate
      requestBody:
        content:
          application/json:
            example:
              CategoryID: '2'
              Content: Your password has been reset.
              Name: Password Reset
            schema:
              $ref: '#/components/schemas/TextModuleCreate'
        description: The text module object to be created.
        required: true
      responses:
        '201':
          description: The text module was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new text module
      tags:
      - System - Text Modules
  /system/textmodules/categories:
    get:
      description: Retrieves a list of text module categories.
      operationId: TextModuleCategorySearch
      responses:
        '200':
          description: A list of text module categories.
        '401':
          description: Unauthorized.
      summary: Get text module categories
      tags:
      - System - Text Modules
  /system/textmodules/{TextModuleID}:
    delete:
      description: Deletes a specific text module.
      operationId: TextModuleDelete
      parameters:
      - description: The unique identifier of the text module to delete.
        in: path
        name: TextModuleID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The text module was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a text module
      tags:
      - System - Text Modules
    get:
      description: Retrieves the details of a specific text module.
      operationId: TextModuleGet
      parameters:
      - description: The unique identifier of the text module.
        in: path
        name: TextModuleID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                CategoryID: '3'
                Content: Hello, welcome to our service!
                Name: Welcome Email
                TextModuleID: '1'
              schema:
                $ref: '#/components/schemas/TextModule'
          description: Text module details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific text module
      tags:
      - System - Text Modules
    patch:
      description: Updates an existing text module.
      operationId: TextModuleUpdate
      parameters:
      - description: The unique identifier of the text module to update.
        in: path
        name: TextModuleID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Content: Hello and welcome to our amazing service!
            schema:
              $ref: '#/components/schemas/TextModuleUpdate'
        description: The text module attributes to update.
        required: true
      responses:
        '200':
          description: The text module was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a text module
      tags:
      - System - Text Modules
  /system/ticket/locks:
    get:
      description: Retrieves a list of ticket locks.
      operationId: LockSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Lock:
                    items:
                      $ref: '#/components/schemas/Lock'
                    type: array
                type: object
          description: A list of locks.
        '401':
          description: Unauthorized.
      summary: Search for ticket locks
      tags:
      - System - Ticket Settings
  /system/ticket/locks/{LockID}:
    get:
      description: Retrieves the details of a specific ticket lock.
      operationId: LockGet
      parameters:
      - description: The unique identifier of the lock.
        in: path
        name: LockID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock'
          description: Lock details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket lock
      tags:
      - System - Ticket Settings
  /system/ticket/priorities:
    get:
      description: Retrieves a list of ticket priorities.
      operationId: PrioritySearch
      responses:
        '200':
          content:
            application/json:
              example:
                Priority:
                - Name: 1 low
                  PriorityID: '1'
                - Name: 3 normal
                  PriorityID: '3'
                - Name: 5 high
                  PriorityID: '5'
              schema:
                properties:
                  Priority:
                    items:
                      $ref: '#/components/schemas/Priority'
                    type: array
                type: object
          description: A list of priorities.
        '401':
          description: Unauthorized.
      summary: Search for ticket priorities
      tags:
      - System - Ticket Settings
    post:
      description: Creates a new ticket priority.
      operationId: PriorityCreate
      requestBody:
        content:
          application/json:
            example:
              Name: 2 medium
            schema:
              $ref: '#/components/schemas/PriorityCreate'
        description: The priority object to be created.
        required: true
      responses:
        '201':
          description: The priority was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new ticket priority
      tags:
      - System - Ticket Settings
  /system/ticket/priorities/{PriorityID}:
    delete:
      description: Deletes a specific ticket priority.
      operationId: PriorityDelete
      parameters:
      - description: The unique identifier of the priority to delete.
        in: path
        name: PriorityID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The priority was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a ticket priority
      tags:
      - System - Ticket Settings
    get:
      description: Retrieves the details of a specific ticket priority.
      operationId: PriorityGet
      parameters:
      - description: The unique identifier of the priority.
        in: path
        name: PriorityID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Name: 3 normal
                PriorityID: '3'
              schema:
                $ref: '#/components/schemas/Priority'
          description: Priority details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket priority
      tags:
      - System - Ticket Settings
    patch:
      description: Updates an existing ticket priority.
      operationId: PriorityUpdate
      parameters:
      - description: The unique identifier of the priority to update.
        in: path
        name: PriorityID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Name: 4 high
            schema:
              $ref: '#/components/schemas/PriorityUpdate'
        description: The priority attributes to update.
        required: true
      responses:
        '200':
          description: The priority was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a ticket priority
      tags:
      - System - Ticket Settings
  /system/ticket/queues:
    get:
      description: Retrieves a list of ticket queues.
      operationId: QueueSearch
      responses:
        '200':
          content:
            application/json:
              example:
                Queue:
                - GroupID: '1'
                  Name: Service
                  QueueID: '1'
                  SystemAddressID: '1'
              schema:
                properties:
                  Queue:
                    items:
                      $ref: '#/components/schemas/Queue'
                    type: array
                type: object
          description: A list of queues.
        '401':
          description: Unauthorized.
      summary: Search for ticket queues
      tags:
      - System - Ticket Settings
    post:
      description: Creates a new ticket queue.
      operationId: QueueCreate
      requestBody:
        content:
          application/json:
            example:
              GroupID: '2'
              Name: Sales
              SystemAddressID: '2'
            schema:
              $ref: '#/components/schemas/QueueCreate'
        description: The queue object to be created.
        required: true
      responses:
        '201':
          description: The queue was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new ticket queue
      tags:
      - System - Ticket Settings
  /system/ticket/queues/followuptypes:
    get:
      description: Retrieves a list of follow-up types for queues.
      operationId: QueueFollowUpTypeSearch
      responses:
        '200':
          description: A list of follow-up types.
        '401':
          description: Unauthorized.
      summary: Get queue follow-up types
      tags:
      - System - Ticket Settings
  /system/ticket/queues/{QueueID}:
    delete:
      description: Deletes a specific ticket queue.
      operationId: QueueDelete
      parameters:
      - description: The unique identifier of the queue to delete.
        in: path
        name: QueueID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The queue was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a ticket queue
      tags:
      - System - Ticket Settings
    get:
      description: Retrieves the details of a specific ticket queue.
      operationId: QueueGet
      parameters:
      - description: The unique identifier of the queue.
        in: path
        name: QueueID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                GroupID: '1'
                Name: Service
                QueueID: '1'
                SystemAddressID: '1'
              schema:
                $ref: '#/components/schemas/Queue'
          description: Queue details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket queue
      tags:
      - System - Ticket Settings
    patch:
      description: Updates an existing ticket queue.
      operationId: QueueUpdate
      parameters:
      - description: The unique identifier of the queue to update.
        in: path
        name: QueueID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Name: Support
            schema:
              $ref: '#/components/schemas/QueueUpdate'
        description: The queue attributes to update.
        required: true
      responses:
        '200':
          description: The queue was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a ticket queue
      tags:
      - System - Ticket Settings
  /system/ticket/states:
    get:
      description: Retrieves a list of ticket states.
      operationId: TicketStateSearch
      responses:
        '200':
          content:
            application/json:
              example:
                TicketState:
                - Name: new
                  StateID: '1'
                  TypeID: '1'
                - Name: open
                  StateID: '2'
                  TypeID: '1'
              schema:
                properties:
                  TicketState:
                    items:
                      $ref: '#/components/schemas/TicketState'
                    type: array
                type: object
          description: A list of states.
        '401':
          description: Unauthorized.
      summary: Search for ticket states
      tags:
      - System - Ticket Settings
    post:
      description: Creates a new ticket state.
      operationId: TicketStateCreate
      requestBody:
        content:
          application/json:
            example:
              Name: closed
              TypeID: '2'
            schema:
              $ref: '#/components/schemas/TicketStateCreate'
        description: The state object to be created.
        required: true
      responses:
        '201':
          description: The state was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new ticket state
      tags:
      - System - Ticket Settings
  /system/ticket/states/types:
    get:
      description: Retrieves a list of ticket state types.
      operationId: StateTypeSearch
      responses:
        '200':
          description: A list of state types.
        '401':
          description: Unauthorized.
      summary: Get ticket state types
      tags:
      - System - Ticket Settings
  /system/ticket/states/types/{StateTypeID}:
    get:
      description: Retrieves the details of a specific ticket state type.
      operationId: StateTypeGet
      parameters:
      - description: The ID of the state type.
        in: path
        name: StateTypeID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: State type details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket state type
      tags:
      - System - Ticket Settings
  /system/ticket/states/{StateID}:
    delete:
      description: Deletes a specific ticket state.
      operationId: TicketStateDelete
      parameters:
      - description: The unique identifier of the state to delete.
        in: path
        name: StateID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The state was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a ticket state
      tags:
      - System - Ticket Settings
    get:
      description: Retrieves the details of a specific ticket state.
      operationId: TicketStateGet
      parameters:
      - description: The unique identifier of the state.
        in: path
        name: StateID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Name: new
                StateID: '1'
                TypeID: '1'
              schema:
                $ref: '#/components/schemas/TicketState'
          description: State details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket state
      tags:
      - System - Ticket Settings
    patch:
      description: Updates an existing ticket state.
      operationId: TicketStateUpdate
      parameters:
      - description: The unique identifier of the state to update.
        in: path
        name: StateID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Name: pending
            schema:
              $ref: '#/components/schemas/TicketStateUpdate'
        description: The state attributes to update.
        required: true
      responses:
        '200':
          description: The state was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a ticket state
      tags:
      - System - Ticket Settings
  /system/ticket/types:
    get:
      description: Retrieves a list of ticket types.
      operationId: TicketTypeSearch
      responses:
        '200':
          content:
            application/json:
              example:
                TicketType:
                - Name: Incident
                  TypeID: '1'
                - Name: Problem
                  TypeID: '2'
              schema:
                properties:
                  TicketType:
                    items:
                      $ref: '#/components/schemas/TicketType'
                    type: array
                type: object
          description: A list of types.
        '401':
          description: Unauthorized.
      summary: Search for ticket types
      tags:
      - System - Ticket Settings
    post:
      description: Creates a new ticket type.
      operationId: TicketTypeCreate
      requestBody:
        content:
          application/json:
            example:
              Name: Change
            schema:
              $ref: '#/components/schemas/TicketTypeCreate'
        description: The type object to be created.
        required: true
      responses:
        '201':
          description: The type was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new ticket type
      tags:
      - System - Ticket Settings
  /system/ticket/types/{TypeID}:
    delete:
      description: Deletes a specific ticket type.
      operationId: TicketTypeDelete
      parameters:
      - description: The unique identifier of the type to delete.
        in: path
        name: TypeID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The type was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a ticket type
      tags:
      - System - Ticket Settings
    get:
      description: Retrieves the details of a specific ticket type.
      operationId: TicketTypeGet
      parameters:
      - description: The unique identifier of the type.
        in: path
        name: TypeID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Name: Incident
                TypeID: '1'
              schema:
                $ref: '#/components/schemas/TicketType'
          description: Type details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket type
      tags:
      - System - Ticket Settings
    patch:
      description: Updates an existing ticket type.
      operationId: TicketTypeUpdate
      parameters:
      - description: The unique identifier of the type to update.
        in: path
        name: TypeID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              Name: Service Request
            schema:
              $ref: '#/components/schemas/TicketTypeUpdate'
        description: The type attributes to update.
        required: true
      responses:
        '200':
          description: The type was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a ticket type
      tags:
      - System - Ticket Settings
  /system/users:
    get:
      description: Retrieves a list of users.
      operationId: UserSearch
      responses:
        '200':
          content:
            application/json:
              example:
                User:
                - Email: john.doe@example.com
                  FirstName: John
                  IsActive: true
                  LastName: Doe
                  Login: john.doe
                  UserID: '1'
              schema:
                properties:
                  User:
                    items:
                      $ref: '#/components/schemas/User'
                    type: array
                type: object
          description: A list of users.
        '401':
          description: Unauthorized.
      summary: Search for users
      tags:
      - System - Users
    post:
      description: Creates a new user.
      operationId: UserCreate
      requestBody:
        content:
          application/json:
            example:
              Email: jane.doe@example.com
              FirstName: Jane
              IsActive: true
              LastName: Doe
              Login: jane.doe
            schema:
              $ref: '#/components/schemas/UserCreate'
        description: The user object to be created.
        required: true
      responses:
        '201':
          description: The user was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new user
      tags:
      - System - Users
  /system/users/{UserID}:
    get:
      description: Retrieves the details of a specific user.
      operationId: UserGet
      parameters:
      - description: The unique identifier of the user.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Email: john.doe@example.com
                FirstName: John
                IsActive: true
                LastName: Doe
                Login: john.doe
                UserID: '1'
              schema:
                $ref: '#/components/schemas/User'
          description: User details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific user
      tags:
      - System - Users
    patch:
      description: Updates an existing user.
      operationId: UserUpdate
      parameters:
      - description: The unique identifier of the user to update.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              FirstName: Johnathan
              IsActive: false
            schema:
              $ref: '#/components/schemas/UserUpdate'
        description: The user attributes to update.
        required: true
      responses:
        '200':
          description: The user was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a user
      tags:
      - System - Users
  /system/users/{UserID}/preferences:
    get:
      description: Retrieves the preferences for a specific user.
      operationId: UserPreferenceSearch
      parameters:
      - description: The ID of the user.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of preferences.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get user preferences
      tags:
      - System - Users
    post:
      description: Creates a new preference for a specific user.
      operationId: UserPreferenceCreate
      parameters:
      - description: The ID of the user.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The preference was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Create a user preference
      tags:
      - System - Users
  /system/users/{UserID}/preferences/{UserPreferenceID}:
    get:
      description: Retrieves a specific preference for a user.
      operationId: UserPreferenceGet
      parameters:
      - description: The ID of the user.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      - description: The ID of the user preference.
        in: path
        name: UserPreferenceID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Preference details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific user preference
      tags:
      - System - Users
    patch:
      description: Updates a specific preference for a user.
      operationId: UserPreferenceUpdate
      parameters:
      - description: The ID of the user.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      - description: The ID of the user preference to update.
        in: path
        name: UserPreferenceID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The preference was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a user preference
      tags:
      - System - Users
  /system/users/{UserID}/roleids:
    get:
      description: Retrieves the role IDs for a specific user.
      operationId: UserRoleIDSearch
      parameters:
      - description: The ID of the user.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of role IDs.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get role IDs for a user
      tags:
      - System - Users
    post:
      description: Adds a role to a specific user.
      operationId: UserRoleIDCreate
      parameters:
      - description: The ID of the user.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The role was successfully added to the user.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Add a role to a user
      tags:
      - System - Users
  /system/users/{UserID}/roleids/{RoleID}:
    delete:
      description: Removes a specific role from a user.
      operationId: UserRoleIDDelete
      parameters:
      - description: The ID of the user.
        in: path
        name: UserID
        required: true
        schema:
          type: string
      - description: The ID of the role to remove.
        in: path
        name: RoleID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The role was successfully removed from the user.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Remove a role from a user
      tags:
      - System - Users
  /system/valid:
    get:
      description: Retrieves a list of validity states.
      operationId: ValidSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Valid:
                    items:
                      $ref: '#/components/schemas/Valid'
                    type: array
                type: object
          description: A list of valid states.
        '401':
          description: Unauthorized.
      summary: Search for valid states
      tags:
      - System - Validity
  /system/valid/{ValidID}:
    get:
      description: Retrieves the details of a specific validity state.
      operationId: ValidGet
      parameters:
      - description: The unique identifier of the validity state.
        in: path
        name: ValidID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Valid'
          description: Validity state details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific valid state
      tags:
      - System - Validity
  /tickets:
    get:
      description: Retrieves a list of tickets based on specified search criteria.
      operationId: TicketSearch
      parameters:
      - description: The ticket number to search for.
        in: query
        name: TicketNumber
        schema:
          type: string
      - description: Search for tickets with a specific title (wildcard search is
          possible using '*').
        in: query
        name: Title
        schema:
          type: string
      - description: The name of the queue to search in.
        in: query
        name: Queue
        schema:
          type: string
      - description: The state of the tickets to search for.
        in: query
        name: State
        schema:
          type: string
      - description: The priority of the tickets.
        in: query
        name: Priority
        schema:
          type: string
      - description: The login name of the customer user associated with the ticket.
        in: query
        name: CustomerUser
        schema:
          type: string
      - description: The owner of the ticket.
        in: query
        name: Owner
        schema:
          type: string
      - description: The responsible agent for the ticket.
        in: query
        name: Responsible
        schema:
          type: string
      - description: The type of the ticket.
        in: query
        name: Type
        schema:
          type: string
      - description: Tickets created before this timestamp (e.g., '2024-01-01 00:00:00').
        in: query
        name: CreatedBefore
        schema:
          format: date-time
          type: string
      - description: Tickets created after this timestamp (e.g., '2024-01-01 00:00:00').
        in: query
        name: CreatedAfter
        schema:
          format: date-time
          type: string
      - description: Tickets changed before this timestamp (e.g., '2024-01-01 00:00:00').
        in: query
        name: ChangedBefore
        schema:
          format: date-time
          type: string
      - description: Tickets changed after this timestamp (e.g., '2024-01-01 00:00:00').
        in: query
        name: ChangedAfter
        schema:
          format: date-time
          type: string
      - description: Search for a specific dynamic field. 'Name' should be replaced
          with the actual name of the dynamic field (e.g., `DynamicField_ProcessManagementProcessID`).
        in: query
        name: DynamicField_Name
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                Ticket:
                - Changed: '2014-07-01 12:00:00'
                  Created: '2014-07-01 12:00:00'
                  CustomerUser: test
                  Owner: root@localhost
                  Priority: 3 normal
                  Queue: Service
                  State: new
                  TicketID: '4711'
                  TicketNumber: '2014070110123456'
                  Title: REST-API Test
              schema:
                properties:
                  Ticket:
                    items:
                      $ref: '#/components/schemas/Ticket'
                    type: array
                type: object
          description: A list of tickets was successfully retrieved.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Search for tickets
      tags:
      - Tickets
    post:
      description: Creates a new ticket.
      operationId: TicketCreate
      requestBody:
        content:
          application/json:
            example:
              Article:
                Body: The body of the first article.
                MimeType: text/plain
                SenderType: customer
                Subject: The first article
              CustomerUser: test
              DynamicField:
              - Name: DynamicField_Title
                Value: Mr.
              - Name: DynamicField_Firstname
                Value: John
              Queue: Service
              Title: New ticket via REST
            schema:
              $ref: '#/components/schemas/TicketCreate'
        description: The ticket object to be created.
        required: true
      responses:
        '201':
          content:
            application/json:
              example:
                TicketID: '4712'
                TicketNumber: '2014070110123457'
              schema:
                properties:
                  TicketID:
                    type: string
                  TicketNumber:
                    type: string
                type: object
          description: The ticket was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new ticket
      tags:
      - Tickets
  /tickets/{TicketID}:
    get:
      description: Retrieves the details of a specific ticket.
      operationId: TicketGet
      parameters:
      - description: The unique identifier of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
          description: Ticket details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket
      tags:
      - Tickets
  /tickets/{TicketID}/articles:
    get:
      description: Retrieves a list of articles for a specific ticket.
      operationId: ArticleSearch
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of articles.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Search for ticket articles
      tags:
      - Tickets
    post:
      description: Creates a new article for a specific ticket.
      operationId: ArticleCreate
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The article was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Create a new ticket article
      tags:
      - Tickets
  /tickets/{TicketID}/articles/{ArticleID}:
    get:
      description: Retrieves a specific article for a ticket.
      operationId: ArticleGet
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Article details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket article
      tags:
      - Tickets
    patch:
      description: Updates a specific article for a ticket.
      operationId: ArticleUpdate
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article to update.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The article was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a ticket article
      tags:
      - Tickets
  /tickets/{TicketID}/articles/{ArticleID}/attachments:
    get:
      description: Retrieves a list of attachments for a specific ticket article.
      operationId: ArticleAttachmentSearch
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of attachments.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get ticket article attachments
      tags:
      - Tickets
    post:
      description: Adds a new attachment to a specific ticket article.
      operationId: ArticleAttachmentCreate
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The attachment was successfully added.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Add an attachment to a ticket article
      tags:
      - Tickets
  /tickets/{TicketID}/articles/{ArticleID}/attachments/zip:
    get:
      description: Retrieves all attachments for a specific ticket article as a zip
        file.
      operationId: ArticleAttachmentZipGet
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A zip file containing the attachments.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get ticket article attachments as a zip file
      tags:
      - Tickets
  /tickets/{TicketID}/articles/{ArticleID}/attachments/{AttachmentID}:
    get:
      description: Retrieves a specific attachment for a ticket article.
      operationId: ArticleAttachmentGet
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      - description: The ID of the attachment.
        in: path
        name: AttachmentID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Attachment details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket article attachment
      tags:
      - Tickets
  /tickets/{TicketID}/articles/{ArticleID}/flags:
    get:
      description: Retrieves the flags for a specific ticket article.
      operationId: ArticleFlagSearch
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of flags.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get ticket article flags
      tags:
      - Tickets
    post:
      description: Adds a new flag to a specific ticket article.
      operationId: ArticleFlagCreate
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      responses:
        '201':
          description: The flag was successfully added.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Add a flag to a ticket article
      tags:
      - Tickets
  /tickets/{TicketID}/articles/{ArticleID}/flags/{FlagName}:
    get:
      description: Retrieves a specific flag for a ticket article.
      operationId: ArticleFlagGet
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      - description: The name of the flag.
        in: path
        name: FlagName
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Flag details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket article flag
      tags:
      - Tickets
    patch:
      description: Updates a specific flag for a ticket article.
      operationId: ArticleFlagUpdate
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the article.
        in: path
        name: ArticleID
        required: true
        schema:
          type: string
      - description: The name of the flag to update.
        in: path
        name: FlagName
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The flag was successfully updated.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Update a ticket article flag
      tags:
      - Tickets
  /tickets/{TicketID}/history:
    get:
      description: Retrieves the history of a specific ticket.
      operationId: HistorySearch
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of history entries.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get ticket history
      tags:
      - Tickets
  /tickets/{TicketID}/history/{HistoryID}:
    get:
      description: Retrieves a specific history entry for a ticket.
      operationId: HistoryGet
      parameters:
      - description: The ID of the ticket.
        in: path
        name: TicketID
        required: true
        schema:
          type: string
      - description: The ID of the history entry.
        in: path
        name: HistoryID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: History entry details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific ticket history entry
      tags:
      - Tickets
  /virtualfs/{Token}:
    get:
      description: Retrieves a virtual file system by its token.
      operationId: VirtualFSGet
      parameters:
      - description: The token of the virtual file system.
        in: path
        name: Token
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Virtual file system details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a virtual file system
      tags:
      - Virtual FS
  /watchers:
    get:
      description: Retrieves a list of watchers.
      operationId: WatcherSearch
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Watcher:
                    items:
                      $ref: '#/components/schemas/Watcher'
                    type: array
                type: object
          description: A list of watchers.
        '401':
          description: Unauthorized.
      summary: Search for watchers
      tags:
      - Watchers
    post:
      description: Creates a new watcher for an object.
      operationId: WatcherCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WatcherCreate'
        description: The watcher object to be created.
        required: true
      responses:
        '201':
          description: The watcher was successfully created.
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      summary: Create a new watcher
      tags:
      - Watchers
  /watchers/{WatcherID}:
    delete:
      description: Deletes a specific watcher.
      operationId: WatcherDelete
      parameters:
      - description: The unique identifier of the watcher to delete.
        in: path
        name: WatcherID
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The watcher was successfully deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Delete a watcher
      tags:
      - Watchers
    get:
      description: Retrieves the details of a specific watcher.
      operationId: WatcherGet
      parameters:
      - description: The unique identifier of the watcher.
        in: path
        name: WatcherID
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Watcher'
          description: Watcher details.
        '401':
          description: Unauthorized.
        '404':
          description: Not Found.
      summary: Get a specific watcher
      tags:
      - Watchers
servers:
- description: The main production server.
  url: https://{tenant}.kixdesk.com/kix-rest
  variables:
    tenant:
      default: demo
      description: Your personal KIX instance name.
